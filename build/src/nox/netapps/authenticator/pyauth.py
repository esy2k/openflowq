# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyauth', [dirname(__file__)])
        except ImportError:
            import _pyauth
            return _pyauth
        if fp is not None:
            try:
                _mod = imp.load_module('_pyauth', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyauth = swig_import_helper()
    del swig_import_helper
else:
    import _pyauth
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import nox.lib.netinet
class grouplist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, grouplist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, grouplist, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyauth.grouplist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyauth.grouplist___nonzero__(self)
    def __bool__(self): return _pyauth.grouplist___bool__(self)
    def __len__(self): return _pyauth.grouplist___len__(self)
    def pop(self): return _pyauth.grouplist_pop(self)
    def __getslice__(self, *args): return _pyauth.grouplist___getslice__(self, *args)
    def __setslice__(self, *args): return _pyauth.grouplist___setslice__(self, *args)
    def __delslice__(self, *args): return _pyauth.grouplist___delslice__(self, *args)
    def __delitem__(self, *args): return _pyauth.grouplist___delitem__(self, *args)
    def __getitem__(self, *args): return _pyauth.grouplist___getitem__(self, *args)
    def __setitem__(self, *args): return _pyauth.grouplist___setitem__(self, *args)
    def append(self, *args): return _pyauth.grouplist_append(self, *args)
    def empty(self): return _pyauth.grouplist_empty(self)
    def size(self): return _pyauth.grouplist_size(self)
    def clear(self): return _pyauth.grouplist_clear(self)
    def swap(self, *args): return _pyauth.grouplist_swap(self, *args)
    def get_allocator(self): return _pyauth.grouplist_get_allocator(self)
    def begin(self): return _pyauth.grouplist_begin(self)
    def end(self): return _pyauth.grouplist_end(self)
    def rbegin(self): return _pyauth.grouplist_rbegin(self)
    def rend(self): return _pyauth.grouplist_rend(self)
    def pop_back(self): return _pyauth.grouplist_pop_back(self)
    def erase(self, *args): return _pyauth.grouplist_erase(self, *args)
    def __init__(self, *args): 
        this = _pyauth.new_grouplist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyauth.grouplist_push_back(self, *args)
    def front(self): return _pyauth.grouplist_front(self)
    def back(self): return _pyauth.grouplist_back(self)
    def assign(self, *args): return _pyauth.grouplist_assign(self, *args)
    def resize(self, *args): return _pyauth.grouplist_resize(self, *args)
    def insert(self, *args): return _pyauth.grouplist_insert(self, *args)
    def pop_front(self): return _pyauth.grouplist_pop_front(self)
    def push_front(self, *args): return _pyauth.grouplist_push_front(self, *args)
    def reverse(self): return _pyauth.grouplist_reverse(self)
    __swig_destroy__ = _pyauth.delete_grouplist
    __del__ = lambda self : None;
grouplist_swigregister = _pyauth.grouplist_swigregister
grouplist_swigregister(grouplist)

CONTROLLER_PYHOSTGLUE_HH = _pyauth.CONTROLLER_PYHOSTGLUE_HH
class PyAuthenticator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyAuthenticator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyAuthenticator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyauth.new_PyAuthenticator(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pyauth.PyAuthenticator_configure(self, *args)
    def add_internal_subnet(self, *args): return _pyauth.PyAuthenticator_add_internal_subnet(self, *args)
    def remove_internal_subnet(self, *args): return _pyauth.PyAuthenticator_remove_internal_subnet(self, *args)
    def clear_internal_subnets(self): return _pyauth.PyAuthenticator_clear_internal_subnets(self)
    def get_authed_hostname(self, *args): return _pyauth.PyAuthenticator_get_authed_hostname(self, *args)
    def get_authed_locations(self, *args): return _pyauth.PyAuthenticator_get_authed_locations(self, *args)
    def get_authed_addresses(self, *args): return _pyauth.PyAuthenticator_get_authed_addresses(self, *args)
    def is_virtual_location(self, *args): return _pyauth.PyAuthenticator_is_virtual_location(self, *args)
    def get_names(self, *args): return _pyauth.PyAuthenticator_get_names(self, *args)
    def all_updated(self, *args): return _pyauth.PyAuthenticator_all_updated(self, *args)
    def principal_updated(self, *args): return _pyauth.PyAuthenticator_principal_updated(self, *args)
    def groups_updated(self, *args): return _pyauth.PyAuthenticator_groups_updated(self, *args)
    def is_switch_active(self, *args): return _pyauth.PyAuthenticator_is_switch_active(self, *args)
    def is_netid_active(self, *args): return _pyauth.PyAuthenticator_is_netid_active(self, *args)
    def get_port_number(self, *args): return _pyauth.PyAuthenticator_get_port_number(self, *args)
    __swig_destroy__ = _pyauth.delete_PyAuthenticator
    __del__ = lambda self : None;
PyAuthenticator_swigregister = _pyauth.PyAuthenticator_swigregister
PyAuthenticator_swigregister(PyAuthenticator)

class Host_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Host_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Host_event, name)
    __repr__ = _swig_repr
    AUTHENTICATION_EVENT = _pyauth.Host_event_AUTHENTICATION_EVENT
    AUTO_AUTHENTICATION = _pyauth.Host_event_AUTO_AUTHENTICATION
    NWADDR_AUTO_ADD = _pyauth.Host_event_NWADDR_AUTO_ADD
    DEAUTHENTICATION_EVENT = _pyauth.Host_event_DEAUTHENTICATION_EVENT
    NWADDR_AUTO_REMOVE = _pyauth.Host_event_NWADDR_AUTO_REMOVE
    INTERNAL_LOCATION = _pyauth.Host_event_INTERNAL_LOCATION
    BINDING_CHANGE = _pyauth.Host_event_BINDING_CHANGE
    HARD_TIMEOUT = _pyauth.Host_event_HARD_TIMEOUT
    IDLE_TIMEOUT = _pyauth.Host_event_IDLE_TIMEOUT
    SWITCH_LEAVE = _pyauth.Host_event_SWITCH_LEAVE
    LOCATION_LEAVE = _pyauth.Host_event_LOCATION_LEAVE
    HOST_DELETE = _pyauth.Host_event_HOST_DELETE
    HOST_NETID_DELETE = _pyauth.Host_event_HOST_NETID_DELETE
    def __init__(self): 
        this = _pyauth.new_Host_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyauth.delete_Host_event
    __del__ = lambda self : None;
Host_event_swigregister = _pyauth.Host_event_swigregister
Host_event_swigregister(Host_event)

class Host_auth_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Host_auth_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Host_auth_event, name)
    __repr__ = _swig_repr
    AUTHENTICATE = _pyauth.Host_auth_event_AUTHENTICATE
    DEAUTHENTICATE = _pyauth.Host_auth_event_DEAUTHENTICATE
    EF_SWITCH = _pyauth.Host_auth_event_EF_SWITCH
    EF_LOCATION = _pyauth.Host_auth_event_EF_LOCATION
    EF_DLADDR = _pyauth.Host_auth_event_EF_DLADDR
    EF_NWADDR = _pyauth.Host_auth_event_EF_NWADDR
    EF_HOSTNAME = _pyauth.Host_auth_event_EF_HOSTNAME
    EF_HOST_NETID = _pyauth.Host_auth_event_EF_HOST_NETID
    EF_ALL = _pyauth.Host_auth_event_EF_ALL
    def __init__(self, *args): 
        this = _pyauth.new_Host_auth_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyauth.Host_auth_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyauth.Host_auth_event_static_get_name)
    __swig_setmethods__["action"] = _pyauth.Host_auth_event_action_set
    __swig_getmethods__["action"] = _pyauth.Host_auth_event_action_get
    if _newclass:action = _swig_property(_pyauth.Host_auth_event_action_get, _pyauth.Host_auth_event_action_set)
    __swig_setmethods__["datapath_id"] = _pyauth.Host_auth_event_datapath_id_set
    __swig_getmethods__["datapath_id"] = _pyauth.Host_auth_event_datapath_id_get
    if _newclass:datapath_id = _swig_property(_pyauth.Host_auth_event_datapath_id_get, _pyauth.Host_auth_event_datapath_id_set)
    __swig_setmethods__["port"] = _pyauth.Host_auth_event_port_set
    __swig_getmethods__["port"] = _pyauth.Host_auth_event_port_get
    if _newclass:port = _swig_property(_pyauth.Host_auth_event_port_get, _pyauth.Host_auth_event_port_set)
    __swig_setmethods__["dladdr"] = _pyauth.Host_auth_event_dladdr_set
    __swig_getmethods__["dladdr"] = _pyauth.Host_auth_event_dladdr_get
    if _newclass:dladdr = _swig_property(_pyauth.Host_auth_event_dladdr_get, _pyauth.Host_auth_event_dladdr_set)
    __swig_setmethods__["nwaddr"] = _pyauth.Host_auth_event_nwaddr_set
    __swig_getmethods__["nwaddr"] = _pyauth.Host_auth_event_nwaddr_get
    if _newclass:nwaddr = _swig_property(_pyauth.Host_auth_event_nwaddr_get, _pyauth.Host_auth_event_nwaddr_set)
    __swig_setmethods__["hostname"] = _pyauth.Host_auth_event_hostname_set
    __swig_getmethods__["hostname"] = _pyauth.Host_auth_event_hostname_get
    if _newclass:hostname = _swig_property(_pyauth.Host_auth_event_hostname_get, _pyauth.Host_auth_event_hostname_set)
    __swig_setmethods__["host_netid"] = _pyauth.Host_auth_event_host_netid_set
    __swig_getmethods__["host_netid"] = _pyauth.Host_auth_event_host_netid_get
    if _newclass:host_netid = _swig_property(_pyauth.Host_auth_event_host_netid_get, _pyauth.Host_auth_event_host_netid_set)
    __swig_setmethods__["idle_timeout"] = _pyauth.Host_auth_event_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _pyauth.Host_auth_event_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_pyauth.Host_auth_event_idle_timeout_get, _pyauth.Host_auth_event_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _pyauth.Host_auth_event_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _pyauth.Host_auth_event_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_pyauth.Host_auth_event_hard_timeout_get, _pyauth.Host_auth_event_hard_timeout_set)
    __swig_setmethods__["enabled_fields"] = _pyauth.Host_auth_event_enabled_fields_set
    __swig_getmethods__["enabled_fields"] = _pyauth.Host_auth_event_enabled_fields_get
    if _newclass:enabled_fields = _swig_property(_pyauth.Host_auth_event_enabled_fields_get, _pyauth.Host_auth_event_enabled_fields_set)
    __swig_setmethods__["reason"] = _pyauth.Host_auth_event_reason_set
    __swig_getmethods__["reason"] = _pyauth.Host_auth_event_reason_get
    if _newclass:reason = _swig_property(_pyauth.Host_auth_event_reason_get, _pyauth.Host_auth_event_reason_set)
    __swig_getmethods__["fill_python_event"] = lambda x: _pyauth.Host_auth_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyauth.Host_auth_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyauth.Host_auth_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyauth.Host_auth_event_register_event_converter)
    __swig_destroy__ = _pyauth.delete_Host_auth_event
    __del__ = lambda self : None;
Host_auth_event_swigregister = _pyauth.Host_auth_event_swigregister
Host_auth_event_swigregister(Host_auth_event)

def Host_auth_event_static_get_name():
  return _pyauth.Host_auth_event_static_get_name()
Host_auth_event_static_get_name = _pyauth.Host_auth_event_static_get_name

def Host_auth_event_fill_python_event(*args):
  return _pyauth.Host_auth_event_fill_python_event(*args)
Host_auth_event_fill_python_event = _pyauth.Host_auth_event_fill_python_event

def Host_auth_event_register_event_converter(*args):
  return _pyauth.Host_auth_event_register_event_converter(*args)
Host_auth_event_register_event_converter = _pyauth.Host_auth_event_register_event_converter

class Host_bind_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Host_bind_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Host_bind_event, name)
    __repr__ = _swig_repr
    ADD = _pyauth.Host_bind_event_ADD
    REMOVE = _pyauth.Host_bind_event_REMOVE
    def __init__(self, *args): 
        this = _pyauth.new_Host_bind_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyauth.Host_bind_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyauth.Host_bind_event_static_get_name)
    __swig_setmethods__["action"] = _pyauth.Host_bind_event_action_set
    __swig_getmethods__["action"] = _pyauth.Host_bind_event_action_get
    if _newclass:action = _swig_property(_pyauth.Host_bind_event_action_get, _pyauth.Host_bind_event_action_set)
    __swig_setmethods__["datapath_id"] = _pyauth.Host_bind_event_datapath_id_set
    __swig_getmethods__["datapath_id"] = _pyauth.Host_bind_event_datapath_id_get
    if _newclass:datapath_id = _swig_property(_pyauth.Host_bind_event_datapath_id_get, _pyauth.Host_bind_event_datapath_id_set)
    __swig_setmethods__["port"] = _pyauth.Host_bind_event_port_set
    __swig_getmethods__["port"] = _pyauth.Host_bind_event_port_get
    if _newclass:port = _swig_property(_pyauth.Host_bind_event_port_get, _pyauth.Host_bind_event_port_set)
    __swig_setmethods__["switchname"] = _pyauth.Host_bind_event_switchname_set
    __swig_getmethods__["switchname"] = _pyauth.Host_bind_event_switchname_get
    if _newclass:switchname = _swig_property(_pyauth.Host_bind_event_switchname_get, _pyauth.Host_bind_event_switchname_set)
    __swig_setmethods__["locname"] = _pyauth.Host_bind_event_locname_set
    __swig_getmethods__["locname"] = _pyauth.Host_bind_event_locname_get
    if _newclass:locname = _swig_property(_pyauth.Host_bind_event_locname_get, _pyauth.Host_bind_event_locname_set)
    __swig_setmethods__["dladdr"] = _pyauth.Host_bind_event_dladdr_set
    __swig_getmethods__["dladdr"] = _pyauth.Host_bind_event_dladdr_get
    if _newclass:dladdr = _swig_property(_pyauth.Host_bind_event_dladdr_get, _pyauth.Host_bind_event_dladdr_set)
    __swig_setmethods__["nwaddr"] = _pyauth.Host_bind_event_nwaddr_set
    __swig_getmethods__["nwaddr"] = _pyauth.Host_bind_event_nwaddr_get
    if _newclass:nwaddr = _swig_property(_pyauth.Host_bind_event_nwaddr_get, _pyauth.Host_bind_event_nwaddr_set)
    __swig_setmethods__["hostname"] = _pyauth.Host_bind_event_hostname_set
    __swig_getmethods__["hostname"] = _pyauth.Host_bind_event_hostname_get
    if _newclass:hostname = _swig_property(_pyauth.Host_bind_event_hostname_get, _pyauth.Host_bind_event_hostname_set)
    __swig_setmethods__["host_netid"] = _pyauth.Host_bind_event_host_netid_set
    __swig_getmethods__["host_netid"] = _pyauth.Host_bind_event_host_netid_get
    if _newclass:host_netid = _swig_property(_pyauth.Host_bind_event_host_netid_get, _pyauth.Host_bind_event_host_netid_set)
    __swig_setmethods__["reason"] = _pyauth.Host_bind_event_reason_set
    __swig_getmethods__["reason"] = _pyauth.Host_bind_event_reason_get
    if _newclass:reason = _swig_property(_pyauth.Host_bind_event_reason_get, _pyauth.Host_bind_event_reason_set)
    __swig_getmethods__["fill_python_event"] = lambda x: _pyauth.Host_bind_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyauth.Host_bind_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyauth.Host_bind_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyauth.Host_bind_event_register_event_converter)
    __swig_destroy__ = _pyauth.delete_Host_bind_event
    __del__ = lambda self : None;
Host_bind_event_swigregister = _pyauth.Host_bind_event_swigregister
Host_bind_event_swigregister(Host_bind_event)

def Host_bind_event_static_get_name():
  return _pyauth.Host_bind_event_static_get_name()
Host_bind_event_static_get_name = _pyauth.Host_bind_event_static_get_name

def Host_bind_event_fill_python_event(*args):
  return _pyauth.Host_bind_event_fill_python_event(*args)
Host_bind_event_fill_python_event = _pyauth.Host_bind_event_fill_python_event

def Host_bind_event_register_event_converter(*args):
  return _pyauth.Host_bind_event_register_event_converter(*args)
Host_bind_event_register_event_converter = _pyauth.Host_bind_event_register_event_converter

class Host_join_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Host_join_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Host_join_event, name)
    __repr__ = _swig_repr
    JOIN = _pyauth.Host_join_event_JOIN
    LEAVE = _pyauth.Host_join_event_LEAVE
    def __init__(self, *args): 
        this = _pyauth.new_Host_join_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyauth.Host_join_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyauth.Host_join_event_static_get_name)
    __swig_setmethods__["action"] = _pyauth.Host_join_event_action_set
    __swig_getmethods__["action"] = _pyauth.Host_join_event_action_get
    if _newclass:action = _swig_property(_pyauth.Host_join_event_action_get, _pyauth.Host_join_event_action_set)
    __swig_setmethods__["hostname"] = _pyauth.Host_join_event_hostname_set
    __swig_getmethods__["hostname"] = _pyauth.Host_join_event_hostname_get
    if _newclass:hostname = _swig_property(_pyauth.Host_join_event_hostname_get, _pyauth.Host_join_event_hostname_set)
    __swig_setmethods__["reason"] = _pyauth.Host_join_event_reason_set
    __swig_getmethods__["reason"] = _pyauth.Host_join_event_reason_get
    if _newclass:reason = _swig_property(_pyauth.Host_join_event_reason_get, _pyauth.Host_join_event_reason_set)
    __swig_getmethods__["fill_python_event"] = lambda x: _pyauth.Host_join_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyauth.Host_join_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyauth.Host_join_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyauth.Host_join_event_register_event_converter)
    __swig_destroy__ = _pyauth.delete_Host_join_event
    __del__ = lambda self : None;
Host_join_event_swigregister = _pyauth.Host_join_event_swigregister
Host_join_event_swigregister(Host_join_event)

def Host_join_event_static_get_name():
  return _pyauth.Host_join_event_static_get_name()
Host_join_event_static_get_name = _pyauth.Host_join_event_static_get_name

def Host_join_event_fill_python_event(*args):
  return _pyauth.Host_join_event_fill_python_event(*args)
Host_join_event_fill_python_event = _pyauth.Host_join_event_fill_python_event

def Host_join_event_register_event_converter(*args):
  return _pyauth.Host_join_event_register_event_converter(*args)
Host_join_event_register_event_converter = _pyauth.Host_join_event_register_event_converter

class User_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, User_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, User_event, name)
    __repr__ = _swig_repr
    AUTHENTICATION_EVENT = _pyauth.User_event_AUTHENTICATION_EVENT
    DEAUTHENTICATION_EVENT = _pyauth.User_event_DEAUTHENTICATION_EVENT
    HARD_TIMEOUT = _pyauth.User_event_HARD_TIMEOUT
    IDLE_TIMEOUT = _pyauth.User_event_IDLE_TIMEOUT
    HOST_DELETE = _pyauth.User_event_HOST_DELETE
    def __init__(self): 
        this = _pyauth.new_User_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyauth.delete_User_event
    __del__ = lambda self : None;
User_event_swigregister = _pyauth.User_event_swigregister
User_event_swigregister(User_event)

class User_auth_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, User_auth_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, User_auth_event, name)
    __repr__ = _swig_repr
    AUTHENTICATE = _pyauth.User_auth_event_AUTHENTICATE
    DEAUTHENTICATE = _pyauth.User_auth_event_DEAUTHENTICATE
    def __init__(self, *args): 
        this = _pyauth.new_User_auth_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyauth.User_auth_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyauth.User_auth_event_static_get_name)
    __swig_setmethods__["action"] = _pyauth.User_auth_event_action_set
    __swig_getmethods__["action"] = _pyauth.User_auth_event_action_get
    if _newclass:action = _swig_property(_pyauth.User_auth_event_action_get, _pyauth.User_auth_event_action_set)
    __swig_setmethods__["username"] = _pyauth.User_auth_event_username_set
    __swig_getmethods__["username"] = _pyauth.User_auth_event_username_get
    if _newclass:username = _swig_property(_pyauth.User_auth_event_username_get, _pyauth.User_auth_event_username_set)
    __swig_setmethods__["hostname"] = _pyauth.User_auth_event_hostname_set
    __swig_getmethods__["hostname"] = _pyauth.User_auth_event_hostname_get
    if _newclass:hostname = _swig_property(_pyauth.User_auth_event_hostname_get, _pyauth.User_auth_event_hostname_set)
    __swig_setmethods__["idle_timeout"] = _pyauth.User_auth_event_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _pyauth.User_auth_event_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_pyauth.User_auth_event_idle_timeout_get, _pyauth.User_auth_event_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _pyauth.User_auth_event_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _pyauth.User_auth_event_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_pyauth.User_auth_event_hard_timeout_get, _pyauth.User_auth_event_hard_timeout_set)
    __swig_setmethods__["reason"] = _pyauth.User_auth_event_reason_set
    __swig_getmethods__["reason"] = _pyauth.User_auth_event_reason_get
    if _newclass:reason = _swig_property(_pyauth.User_auth_event_reason_get, _pyauth.User_auth_event_reason_set)
    __swig_getmethods__["fill_python_event"] = lambda x: _pyauth.User_auth_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyauth.User_auth_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyauth.User_auth_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyauth.User_auth_event_register_event_converter)
    __swig_destroy__ = _pyauth.delete_User_auth_event
    __del__ = lambda self : None;
User_auth_event_swigregister = _pyauth.User_auth_event_swigregister
User_auth_event_swigregister(User_auth_event)

def User_auth_event_static_get_name():
  return _pyauth.User_auth_event_static_get_name()
User_auth_event_static_get_name = _pyauth.User_auth_event_static_get_name

def User_auth_event_fill_python_event(*args):
  return _pyauth.User_auth_event_fill_python_event(*args)
User_auth_event_fill_python_event = _pyauth.User_auth_event_fill_python_event

def User_auth_event_register_event_converter(*args):
  return _pyauth.User_auth_event_register_event_converter(*args)
User_auth_event_register_event_converter = _pyauth.User_auth_event_register_event_converter

class User_join_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, User_join_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, User_join_event, name)
    __repr__ = _swig_repr
    JOIN = _pyauth.User_join_event_JOIN
    LEAVE = _pyauth.User_join_event_LEAVE
    def __init__(self, *args): 
        this = _pyauth.new_User_join_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyauth.User_join_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyauth.User_join_event_static_get_name)
    __swig_setmethods__["action"] = _pyauth.User_join_event_action_set
    __swig_getmethods__["action"] = _pyauth.User_join_event_action_get
    if _newclass:action = _swig_property(_pyauth.User_join_event_action_get, _pyauth.User_join_event_action_set)
    __swig_setmethods__["username"] = _pyauth.User_join_event_username_set
    __swig_getmethods__["username"] = _pyauth.User_join_event_username_get
    if _newclass:username = _swig_property(_pyauth.User_join_event_username_get, _pyauth.User_join_event_username_set)
    __swig_setmethods__["hostname"] = _pyauth.User_join_event_hostname_set
    __swig_getmethods__["hostname"] = _pyauth.User_join_event_hostname_get
    if _newclass:hostname = _swig_property(_pyauth.User_join_event_hostname_get, _pyauth.User_join_event_hostname_set)
    __swig_setmethods__["reason"] = _pyauth.User_join_event_reason_set
    __swig_getmethods__["reason"] = _pyauth.User_join_event_reason_get
    if _newclass:reason = _swig_property(_pyauth.User_join_event_reason_get, _pyauth.User_join_event_reason_set)
    __swig_getmethods__["fill_python_event"] = lambda x: _pyauth.User_join_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyauth.User_join_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyauth.User_join_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyauth.User_join_event_register_event_converter)
    __swig_destroy__ = _pyauth.delete_User_join_event
    __del__ = lambda self : None;
User_join_event_swigregister = _pyauth.User_join_event_swigregister
User_join_event_swigregister(User_join_event)

def User_join_event_static_get_name():
  return _pyauth.User_join_event_static_get_name()
User_join_event_static_get_name = _pyauth.User_join_event_static_get_name

def User_join_event_fill_python_event(*args):
  return _pyauth.User_join_event_fill_python_event(*args)
User_join_event_fill_python_event = _pyauth.User_join_event_fill_python_event

def User_join_event_register_event_converter(*args):
  return _pyauth.User_join_event_register_event_converter(*args)
User_join_event_register_event_converter = _pyauth.User_join_event_register_event_converter

class Switch_bind_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch_bind_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Switch_bind_event, name)
    __repr__ = _swig_repr
    JOIN = _pyauth.Switch_bind_event_JOIN
    LEAVE = _pyauth.Switch_bind_event_LEAVE
    def __init__(self, *args): 
        this = _pyauth.new_Switch_bind_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyauth.Switch_bind_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyauth.Switch_bind_event_static_get_name)
    __swig_setmethods__["action"] = _pyauth.Switch_bind_event_action_set
    __swig_getmethods__["action"] = _pyauth.Switch_bind_event_action_get
    if _newclass:action = _swig_property(_pyauth.Switch_bind_event_action_get, _pyauth.Switch_bind_event_action_set)
    __swig_setmethods__["datapath_id"] = _pyauth.Switch_bind_event_datapath_id_set
    __swig_getmethods__["datapath_id"] = _pyauth.Switch_bind_event_datapath_id_get
    if _newclass:datapath_id = _swig_property(_pyauth.Switch_bind_event_datapath_id_get, _pyauth.Switch_bind_event_datapath_id_set)
    __swig_setmethods__["switchname"] = _pyauth.Switch_bind_event_switchname_set
    __swig_getmethods__["switchname"] = _pyauth.Switch_bind_event_switchname_get
    if _newclass:switchname = _swig_property(_pyauth.Switch_bind_event_switchname_get, _pyauth.Switch_bind_event_switchname_set)
    __swig_getmethods__["fill_python_event"] = lambda x: _pyauth.Switch_bind_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyauth.Switch_bind_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyauth.Switch_bind_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyauth.Switch_bind_event_register_event_converter)
    __swig_destroy__ = _pyauth.delete_Switch_bind_event
    __del__ = lambda self : None;
Switch_bind_event_swigregister = _pyauth.Switch_bind_event_swigregister
Switch_bind_event_swigregister(Switch_bind_event)

def Switch_bind_event_static_get_name():
  return _pyauth.Switch_bind_event_static_get_name()
Switch_bind_event_static_get_name = _pyauth.Switch_bind_event_static_get_name

def Switch_bind_event_fill_python_event(*args):
  return _pyauth.Switch_bind_event_fill_python_event(*args)
Switch_bind_event_fill_python_event = _pyauth.Switch_bind_event_fill_python_event

def Switch_bind_event_register_event_converter(*args):
  return _pyauth.Switch_bind_event_register_event_converter(*args)
Switch_bind_event_register_event_converter = _pyauth.Switch_bind_event_register_event_converter

from nox.lib.core import Component

class PyAuth(Component):
    def __init__(self, ctxt):
        Component.__init__(self, ctxt)
        self.authenticator = PyAuthenticator(ctxt)
    
    def configure(self, configuration):
        self.authenticator.configure(configuration)
        Host_auth_event.register_event_converter(self.ctxt)
        Host_bind_event.register_event_converter(self.ctxt)
        Host_join_event.register_event_converter(self.ctxt)
        User_auth_event.register_event_converter(self.ctxt)
        User_join_event.register_event_converter(self.ctxt)
        Switch_bind_event.register_event_converter(self.ctxt)

    def getInterface(self):
        return str(PyAuth)

    def add_internal_subnet(self, cidr):
        self.authenticator.add_internal_subnet(cidr)

    def remove_internal_subnet(self, cidr):
        self.authenticator.remove_internal_subnet(cidr)

    def clear_internal_subnets(self):
        self.authenticator.clear_internal_subnets()

    def get_authed_hostname(self, dladdr, nwaddr):
        return self.authenticator.get_authed_hostname(dladdr, nwaddr)

    def get_authed_locations(self, dladdr, nwaddr):
        return self.authenticator.get_authed_locations(dladdr, nwaddr)

    def get_authed_addresses(self, hostid):
        return self.authenticator.get_authed_addresses(hostid)

    def is_virtual_location(self, dp, port):
        return self.authenticator.is_virtual_location(dp, port)

    def get_names(self, dp, inport, dlsrc, nwsrc, dldst, nwdst, callable):
        self.authenticator.get_names(dp, inport, dlsrc, nwsrc, dldst, nwdst, callable)

    def all_updated(self, poison):
        self.authenticator.all_updated(poison)

    def principal_updated(self, ptype, id, poison):
        self.authenticator.principal_updated(ptype, id, poison)
        
    def groups_updated(self, ids, poison):
        self.authenticator.groups_updated(ids, poison)

    def is_switch_active(self, dp):
        return self.authenticator.is_switch_active(dp)

    def is_netid_active(self, netid):
        return self.authenticator.is_netid_active(netid)

    def get_port_number(self, dp, port_name):
        return self.authenticator.get_port_number(dp, port_name)

def getFactory():
    class Factory():
        def instance(self, context):
            return PyAuth(context)

    return Factory()



