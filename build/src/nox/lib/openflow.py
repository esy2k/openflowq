# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openflow', [dirname(__file__)])
        except ImportError:
            import _openflow
            return _openflow
        if fp is not None:
            try:
                _mod = imp.load_module('_openflow', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openflow = swig_import_helper()
    del swig_import_helper
else:
    import _openflow
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _openflow.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _openflow.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_openflow.imaxdiv_t_quot_get, _openflow.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _openflow.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _openflow.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_openflow.imaxdiv_t_rem_get, _openflow.imaxdiv_t_rem_set)
    def __init__(self): 
        this = _openflow.new_imaxdiv_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _openflow.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(*args):
  return _openflow.imaxabs(*args)
imaxabs = _openflow.imaxabs

def imaxdiv(*args):
  return _openflow.imaxdiv(*args)
imaxdiv = _openflow.imaxdiv

def strtoimax(*args):
  return _openflow.strtoimax(*args)
strtoimax = _openflow.strtoimax

def strtoumax(*args):
  return _openflow.strtoumax(*args)
strtoumax = _openflow.strtoumax

def wcstoimax(*args):
  return _openflow.wcstoimax(*args)
wcstoimax = _openflow.wcstoimax

def wcstoumax(*args):
  return _openflow.wcstoumax(*args)
wcstoumax = _openflow.wcstoumax

def exit(*args):
  return _openflow.exit(*args)
exit = _openflow.exit
OPENFLOW_OPENFLOW_H = _openflow.OPENFLOW_OPENFLOW_H
OFP_VERSION = _openflow.OFP_VERSION
OFP_MAX_TABLE_NAME_LEN = _openflow.OFP_MAX_TABLE_NAME_LEN
OFP_MAX_PORT_NAME_LEN = _openflow.OFP_MAX_PORT_NAME_LEN
OFP_TCP_PORT = _openflow.OFP_TCP_PORT
OFP_SSL_PORT = _openflow.OFP_SSL_PORT
OFP_ETH_ALEN = _openflow.OFP_ETH_ALEN
OFPP_MAX = _openflow.OFPP_MAX
OFPP_IN_PORT = _openflow.OFPP_IN_PORT
OFPP_TABLE = _openflow.OFPP_TABLE
OFPP_NORMAL = _openflow.OFPP_NORMAL
OFPP_FLOOD = _openflow.OFPP_FLOOD
OFPP_ALL = _openflow.OFPP_ALL
OFPP_CONTROLLER = _openflow.OFPP_CONTROLLER
OFPP_LOCAL = _openflow.OFPP_LOCAL
OFPP_NONE = _openflow.OFPP_NONE
OFPT_HELLO = _openflow.OFPT_HELLO
OFPT_ERROR = _openflow.OFPT_ERROR
OFPT_ECHO_REQUEST = _openflow.OFPT_ECHO_REQUEST
OFPT_ECHO_REPLY = _openflow.OFPT_ECHO_REPLY
OFPT_VENDOR = _openflow.OFPT_VENDOR
OFPT_FEATURES_REQUEST = _openflow.OFPT_FEATURES_REQUEST
OFPT_FEATURES_REPLY = _openflow.OFPT_FEATURES_REPLY
OFPT_GET_CONFIG_REQUEST = _openflow.OFPT_GET_CONFIG_REQUEST
OFPT_GET_CONFIG_REPLY = _openflow.OFPT_GET_CONFIG_REPLY
OFPT_SET_CONFIG = _openflow.OFPT_SET_CONFIG
OFPT_PACKET_IN = _openflow.OFPT_PACKET_IN
OFPT_FLOW_REMOVED = _openflow.OFPT_FLOW_REMOVED
OFPT_PORT_STATUS = _openflow.OFPT_PORT_STATUS
OFPT_PACKET_OUT = _openflow.OFPT_PACKET_OUT
OFPT_FLOW_MOD = _openflow.OFPT_FLOW_MOD
OFPT_PORT_MOD = _openflow.OFPT_PORT_MOD
OFPT_STATS_REQUEST = _openflow.OFPT_STATS_REQUEST
OFPT_STATS_REPLY = _openflow.OFPT_STATS_REPLY
OFPT_BARRIER_REQUEST = _openflow.OFPT_BARRIER_REQUEST
OFPT_BARRIER_REPLY = _openflow.OFPT_BARRIER_REPLY
OFPT_QUEUE_GET_CONFIG_REQUEST = _openflow.OFPT_QUEUE_GET_CONFIG_REQUEST
OFPT_QUEUE_GET_CONFIG_REPLY = _openflow.OFPT_QUEUE_GET_CONFIG_REPLY
class ofp_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _openflow.ofp_header_version_set
    __swig_getmethods__["version"] = _openflow.ofp_header_version_get
    if _newclass:version = _swig_property(_openflow.ofp_header_version_get, _openflow.ofp_header_version_set)
    __swig_setmethods__["type"] = _openflow.ofp_header_type_set
    __swig_getmethods__["type"] = _openflow.ofp_header_type_get
    if _newclass:type = _swig_property(_openflow.ofp_header_type_get, _openflow.ofp_header_type_set)
    __swig_setmethods__["length"] = _openflow.ofp_header_length_set
    __swig_getmethods__["length"] = _openflow.ofp_header_length_get
    if _newclass:length = _swig_property(_openflow.ofp_header_length_get, _openflow.ofp_header_length_set)
    __swig_setmethods__["xid"] = _openflow.ofp_header_xid_set
    __swig_getmethods__["xid"] = _openflow.ofp_header_xid_get
    if _newclass:xid = _swig_property(_openflow.ofp_header_xid_get, _openflow.ofp_header_xid_set)
    def __init__(self): 
        this = _openflow.new_ofp_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_header
    __del__ = lambda self : None;
ofp_header_swigregister = _openflow.ofp_header_swigregister
ofp_header_swigregister(ofp_header)

class ofp_hello(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_hello, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_hello, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_hello_header_set
    __swig_getmethods__["header"] = _openflow.ofp_hello_header_get
    if _newclass:header = _swig_property(_openflow.ofp_hello_header_get, _openflow.ofp_hello_header_set)
    def __init__(self): 
        this = _openflow.new_ofp_hello()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_hello
    __del__ = lambda self : None;
ofp_hello_swigregister = _openflow.ofp_hello_swigregister
ofp_hello_swigregister(ofp_hello)

OFP_DEFAULT_MISS_SEND_LEN = _openflow.OFP_DEFAULT_MISS_SEND_LEN
OFPC_FRAG_NORMAL = _openflow.OFPC_FRAG_NORMAL
OFPC_FRAG_DROP = _openflow.OFPC_FRAG_DROP
OFPC_FRAG_REASM = _openflow.OFPC_FRAG_REASM
OFPC_FRAG_MASK = _openflow.OFPC_FRAG_MASK
class ofp_switch_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_switch_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_switch_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_switch_config_header_set
    __swig_getmethods__["header"] = _openflow.ofp_switch_config_header_get
    if _newclass:header = _swig_property(_openflow.ofp_switch_config_header_get, _openflow.ofp_switch_config_header_set)
    __swig_setmethods__["flags"] = _openflow.ofp_switch_config_flags_set
    __swig_getmethods__["flags"] = _openflow.ofp_switch_config_flags_get
    if _newclass:flags = _swig_property(_openflow.ofp_switch_config_flags_get, _openflow.ofp_switch_config_flags_set)
    __swig_setmethods__["miss_send_len"] = _openflow.ofp_switch_config_miss_send_len_set
    __swig_getmethods__["miss_send_len"] = _openflow.ofp_switch_config_miss_send_len_get
    if _newclass:miss_send_len = _swig_property(_openflow.ofp_switch_config_miss_send_len_get, _openflow.ofp_switch_config_miss_send_len_set)
    def __init__(self): 
        this = _openflow.new_ofp_switch_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_switch_config
    __del__ = lambda self : None;
ofp_switch_config_swigregister = _openflow.ofp_switch_config_swigregister
ofp_switch_config_swigregister(ofp_switch_config)

OFPC_FLOW_STATS = _openflow.OFPC_FLOW_STATS
OFPC_TABLE_STATS = _openflow.OFPC_TABLE_STATS
OFPC_PORT_STATS = _openflow.OFPC_PORT_STATS
OFPC_STP = _openflow.OFPC_STP
OFPC_RESERVED = _openflow.OFPC_RESERVED
OFPC_IP_REASM = _openflow.OFPC_IP_REASM
OFPC_QUEUE_STATS = _openflow.OFPC_QUEUE_STATS
OFPC_ARP_MATCH_IP = _openflow.OFPC_ARP_MATCH_IP
OFPPC_PORT_DOWN = _openflow.OFPPC_PORT_DOWN
OFPPC_NO_STP = _openflow.OFPPC_NO_STP
OFPPC_NO_RECV = _openflow.OFPPC_NO_RECV
OFPPC_NO_RECV_STP = _openflow.OFPPC_NO_RECV_STP
OFPPC_NO_FLOOD = _openflow.OFPPC_NO_FLOOD
OFPPC_NO_FWD = _openflow.OFPPC_NO_FWD
OFPPC_NO_PACKET_IN = _openflow.OFPPC_NO_PACKET_IN
OFPPS_LINK_DOWN = _openflow.OFPPS_LINK_DOWN
OFPPS_STP_LISTEN = _openflow.OFPPS_STP_LISTEN
OFPPS_STP_LEARN = _openflow.OFPPS_STP_LEARN
OFPPS_STP_FORWARD = _openflow.OFPPS_STP_FORWARD
OFPPS_STP_BLOCK = _openflow.OFPPS_STP_BLOCK
OFPPS_STP_MASK = _openflow.OFPPS_STP_MASK
OFPPF_10MB_HD = _openflow.OFPPF_10MB_HD
OFPPF_10MB_FD = _openflow.OFPPF_10MB_FD
OFPPF_100MB_HD = _openflow.OFPPF_100MB_HD
OFPPF_100MB_FD = _openflow.OFPPF_100MB_FD
OFPPF_1GB_HD = _openflow.OFPPF_1GB_HD
OFPPF_1GB_FD = _openflow.OFPPF_1GB_FD
OFPPF_10GB_FD = _openflow.OFPPF_10GB_FD
OFPPF_COPPER = _openflow.OFPPF_COPPER
OFPPF_FIBER = _openflow.OFPPF_FIBER
OFPPF_AUTONEG = _openflow.OFPPF_AUTONEG
OFPPF_PAUSE = _openflow.OFPPF_PAUSE
OFPPF_PAUSE_ASYM = _openflow.OFPPF_PAUSE_ASYM
class ofp_phy_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_phy_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_phy_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _openflow.ofp_phy_port_port_no_set
    __swig_getmethods__["port_no"] = _openflow.ofp_phy_port_port_no_get
    if _newclass:port_no = _swig_property(_openflow.ofp_phy_port_port_no_get, _openflow.ofp_phy_port_port_no_set)
    __swig_setmethods__["hw_addr"] = _openflow.ofp_phy_port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _openflow.ofp_phy_port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_openflow.ofp_phy_port_hw_addr_get, _openflow.ofp_phy_port_hw_addr_set)
    __swig_setmethods__["name"] = _openflow.ofp_phy_port_name_set
    __swig_getmethods__["name"] = _openflow.ofp_phy_port_name_get
    if _newclass:name = _swig_property(_openflow.ofp_phy_port_name_get, _openflow.ofp_phy_port_name_set)
    __swig_setmethods__["config"] = _openflow.ofp_phy_port_config_set
    __swig_getmethods__["config"] = _openflow.ofp_phy_port_config_get
    if _newclass:config = _swig_property(_openflow.ofp_phy_port_config_get, _openflow.ofp_phy_port_config_set)
    __swig_setmethods__["state"] = _openflow.ofp_phy_port_state_set
    __swig_getmethods__["state"] = _openflow.ofp_phy_port_state_get
    if _newclass:state = _swig_property(_openflow.ofp_phy_port_state_get, _openflow.ofp_phy_port_state_set)
    __swig_setmethods__["curr"] = _openflow.ofp_phy_port_curr_set
    __swig_getmethods__["curr"] = _openflow.ofp_phy_port_curr_get
    if _newclass:curr = _swig_property(_openflow.ofp_phy_port_curr_get, _openflow.ofp_phy_port_curr_set)
    __swig_setmethods__["advertised"] = _openflow.ofp_phy_port_advertised_set
    __swig_getmethods__["advertised"] = _openflow.ofp_phy_port_advertised_get
    if _newclass:advertised = _swig_property(_openflow.ofp_phy_port_advertised_get, _openflow.ofp_phy_port_advertised_set)
    __swig_setmethods__["supported"] = _openflow.ofp_phy_port_supported_set
    __swig_getmethods__["supported"] = _openflow.ofp_phy_port_supported_get
    if _newclass:supported = _swig_property(_openflow.ofp_phy_port_supported_get, _openflow.ofp_phy_port_supported_set)
    __swig_setmethods__["peer"] = _openflow.ofp_phy_port_peer_set
    __swig_getmethods__["peer"] = _openflow.ofp_phy_port_peer_get
    if _newclass:peer = _swig_property(_openflow.ofp_phy_port_peer_get, _openflow.ofp_phy_port_peer_set)
    def __init__(self): 
        this = _openflow.new_ofp_phy_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_phy_port
    __del__ = lambda self : None;
ofp_phy_port_swigregister = _openflow.ofp_phy_port_swigregister
ofp_phy_port_swigregister(ofp_phy_port)

class ofp_switch_features(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_switch_features, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_switch_features, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_switch_features_header_set
    __swig_getmethods__["header"] = _openflow.ofp_switch_features_header_get
    if _newclass:header = _swig_property(_openflow.ofp_switch_features_header_get, _openflow.ofp_switch_features_header_set)
    __swig_setmethods__["datapath_id"] = _openflow.ofp_switch_features_datapath_id_set
    __swig_getmethods__["datapath_id"] = _openflow.ofp_switch_features_datapath_id_get
    if _newclass:datapath_id = _swig_property(_openflow.ofp_switch_features_datapath_id_get, _openflow.ofp_switch_features_datapath_id_set)
    __swig_setmethods__["n_buffers"] = _openflow.ofp_switch_features_n_buffers_set
    __swig_getmethods__["n_buffers"] = _openflow.ofp_switch_features_n_buffers_get
    if _newclass:n_buffers = _swig_property(_openflow.ofp_switch_features_n_buffers_get, _openflow.ofp_switch_features_n_buffers_set)
    __swig_setmethods__["n_tables"] = _openflow.ofp_switch_features_n_tables_set
    __swig_getmethods__["n_tables"] = _openflow.ofp_switch_features_n_tables_get
    if _newclass:n_tables = _swig_property(_openflow.ofp_switch_features_n_tables_get, _openflow.ofp_switch_features_n_tables_set)
    __swig_setmethods__["pad"] = _openflow.ofp_switch_features_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_switch_features_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_switch_features_pad_get, _openflow.ofp_switch_features_pad_set)
    __swig_setmethods__["capabilities"] = _openflow.ofp_switch_features_capabilities_set
    __swig_getmethods__["capabilities"] = _openflow.ofp_switch_features_capabilities_get
    if _newclass:capabilities = _swig_property(_openflow.ofp_switch_features_capabilities_get, _openflow.ofp_switch_features_capabilities_set)
    __swig_setmethods__["actions"] = _openflow.ofp_switch_features_actions_set
    __swig_getmethods__["actions"] = _openflow.ofp_switch_features_actions_get
    if _newclass:actions = _swig_property(_openflow.ofp_switch_features_actions_get, _openflow.ofp_switch_features_actions_set)
    __swig_setmethods__["ports"] = _openflow.ofp_switch_features_ports_set
    __swig_getmethods__["ports"] = _openflow.ofp_switch_features_ports_get
    if _newclass:ports = _swig_property(_openflow.ofp_switch_features_ports_get, _openflow.ofp_switch_features_ports_set)
    def __init__(self): 
        this = _openflow.new_ofp_switch_features()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_switch_features
    __del__ = lambda self : None;
ofp_switch_features_swigregister = _openflow.ofp_switch_features_swigregister
ofp_switch_features_swigregister(ofp_switch_features)

OFPPR_ADD = _openflow.OFPPR_ADD
OFPPR_DELETE = _openflow.OFPPR_DELETE
OFPPR_MODIFY = _openflow.OFPPR_MODIFY
class ofp_port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_port_status_header_set
    __swig_getmethods__["header"] = _openflow.ofp_port_status_header_get
    if _newclass:header = _swig_property(_openflow.ofp_port_status_header_get, _openflow.ofp_port_status_header_set)
    __swig_setmethods__["reason"] = _openflow.ofp_port_status_reason_set
    __swig_getmethods__["reason"] = _openflow.ofp_port_status_reason_get
    if _newclass:reason = _swig_property(_openflow.ofp_port_status_reason_get, _openflow.ofp_port_status_reason_set)
    __swig_setmethods__["pad"] = _openflow.ofp_port_status_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_port_status_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_port_status_pad_get, _openflow.ofp_port_status_pad_set)
    __swig_setmethods__["desc"] = _openflow.ofp_port_status_desc_set
    __swig_getmethods__["desc"] = _openflow.ofp_port_status_desc_get
    if _newclass:desc = _swig_property(_openflow.ofp_port_status_desc_get, _openflow.ofp_port_status_desc_set)
    def __init__(self): 
        this = _openflow.new_ofp_port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_port_status
    __del__ = lambda self : None;
ofp_port_status_swigregister = _openflow.ofp_port_status_swigregister
ofp_port_status_swigregister(ofp_port_status)

class ofp_port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_port_mod_header_set
    __swig_getmethods__["header"] = _openflow.ofp_port_mod_header_get
    if _newclass:header = _swig_property(_openflow.ofp_port_mod_header_get, _openflow.ofp_port_mod_header_set)
    __swig_setmethods__["port_no"] = _openflow.ofp_port_mod_port_no_set
    __swig_getmethods__["port_no"] = _openflow.ofp_port_mod_port_no_get
    if _newclass:port_no = _swig_property(_openflow.ofp_port_mod_port_no_get, _openflow.ofp_port_mod_port_no_set)
    __swig_setmethods__["hw_addr"] = _openflow.ofp_port_mod_hw_addr_set
    __swig_getmethods__["hw_addr"] = _openflow.ofp_port_mod_hw_addr_get
    if _newclass:hw_addr = _swig_property(_openflow.ofp_port_mod_hw_addr_get, _openflow.ofp_port_mod_hw_addr_set)
    __swig_setmethods__["config"] = _openflow.ofp_port_mod_config_set
    __swig_getmethods__["config"] = _openflow.ofp_port_mod_config_get
    if _newclass:config = _swig_property(_openflow.ofp_port_mod_config_get, _openflow.ofp_port_mod_config_set)
    __swig_setmethods__["mask"] = _openflow.ofp_port_mod_mask_set
    __swig_getmethods__["mask"] = _openflow.ofp_port_mod_mask_get
    if _newclass:mask = _swig_property(_openflow.ofp_port_mod_mask_get, _openflow.ofp_port_mod_mask_set)
    __swig_setmethods__["advertise"] = _openflow.ofp_port_mod_advertise_set
    __swig_getmethods__["advertise"] = _openflow.ofp_port_mod_advertise_get
    if _newclass:advertise = _swig_property(_openflow.ofp_port_mod_advertise_get, _openflow.ofp_port_mod_advertise_set)
    __swig_setmethods__["pad"] = _openflow.ofp_port_mod_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_port_mod_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_port_mod_pad_get, _openflow.ofp_port_mod_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_port_mod
    __del__ = lambda self : None;
ofp_port_mod_swigregister = _openflow.ofp_port_mod_swigregister
ofp_port_mod_swigregister(ofp_port_mod)

OFPR_NO_MATCH = _openflow.OFPR_NO_MATCH
OFPR_ACTION = _openflow.OFPR_ACTION
class ofp_packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_in, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_packet_in_header_set
    __swig_getmethods__["header"] = _openflow.ofp_packet_in_header_get
    if _newclass:header = _swig_property(_openflow.ofp_packet_in_header_get, _openflow.ofp_packet_in_header_set)
    __swig_setmethods__["buffer_id"] = _openflow.ofp_packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _openflow.ofp_packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_openflow.ofp_packet_in_buffer_id_get, _openflow.ofp_packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _openflow.ofp_packet_in_total_len_set
    __swig_getmethods__["total_len"] = _openflow.ofp_packet_in_total_len_get
    if _newclass:total_len = _swig_property(_openflow.ofp_packet_in_total_len_get, _openflow.ofp_packet_in_total_len_set)
    __swig_setmethods__["in_port"] = _openflow.ofp_packet_in_in_port_set
    __swig_getmethods__["in_port"] = _openflow.ofp_packet_in_in_port_get
    if _newclass:in_port = _swig_property(_openflow.ofp_packet_in_in_port_get, _openflow.ofp_packet_in_in_port_set)
    __swig_setmethods__["reason"] = _openflow.ofp_packet_in_reason_set
    __swig_getmethods__["reason"] = _openflow.ofp_packet_in_reason_get
    if _newclass:reason = _swig_property(_openflow.ofp_packet_in_reason_get, _openflow.ofp_packet_in_reason_set)
    __swig_setmethods__["pad"] = _openflow.ofp_packet_in_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_packet_in_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_packet_in_pad_get, _openflow.ofp_packet_in_pad_set)
    __swig_setmethods__["data"] = _openflow.ofp_packet_in_data_set
    __swig_getmethods__["data"] = _openflow.ofp_packet_in_data_get
    if _newclass:data = _swig_property(_openflow.ofp_packet_in_data_get, _openflow.ofp_packet_in_data_set)
    def __init__(self): 
        this = _openflow.new_ofp_packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_packet_in
    __del__ = lambda self : None;
ofp_packet_in_swigregister = _openflow.ofp_packet_in_swigregister
ofp_packet_in_swigregister(ofp_packet_in)

OFPAT_OUTPUT = _openflow.OFPAT_OUTPUT
OFPAT_SET_VLAN_VID = _openflow.OFPAT_SET_VLAN_VID
OFPAT_SET_VLAN_PCP = _openflow.OFPAT_SET_VLAN_PCP
OFPAT_STRIP_VLAN = _openflow.OFPAT_STRIP_VLAN
OFPAT_SET_DL_SRC = _openflow.OFPAT_SET_DL_SRC
OFPAT_SET_DL_DST = _openflow.OFPAT_SET_DL_DST
OFPAT_SET_NW_SRC = _openflow.OFPAT_SET_NW_SRC
OFPAT_SET_NW_DST = _openflow.OFPAT_SET_NW_DST
OFPAT_SET_NW_TOS = _openflow.OFPAT_SET_NW_TOS
OFPAT_SET_TP_SRC = _openflow.OFPAT_SET_TP_SRC
OFPAT_SET_TP_DST = _openflow.OFPAT_SET_TP_DST
OFPAT_ENQUEUE = _openflow.OFPAT_ENQUEUE
OFPAT_VENDOR = _openflow.OFPAT_VENDOR
class ofp_action_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_output_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_output_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_output_type_get, _openflow.ofp_action_output_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_output_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_output_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_output_len_get, _openflow.ofp_action_output_len_set)
    __swig_setmethods__["port"] = _openflow.ofp_action_output_port_set
    __swig_getmethods__["port"] = _openflow.ofp_action_output_port_get
    if _newclass:port = _swig_property(_openflow.ofp_action_output_port_get, _openflow.ofp_action_output_port_set)
    __swig_setmethods__["max_len"] = _openflow.ofp_action_output_max_len_set
    __swig_getmethods__["max_len"] = _openflow.ofp_action_output_max_len_get
    if _newclass:max_len = _swig_property(_openflow.ofp_action_output_max_len_get, _openflow.ofp_action_output_max_len_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_output
    __del__ = lambda self : None;
ofp_action_output_swigregister = _openflow.ofp_action_output_swigregister
ofp_action_output_swigregister(ofp_action_output)

OFP_VLAN_NONE = _openflow.OFP_VLAN_NONE
class ofp_action_vlan_vid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vlan_vid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vlan_vid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_vlan_vid_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_vlan_vid_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_vlan_vid_type_get, _openflow.ofp_action_vlan_vid_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_vlan_vid_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_vlan_vid_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_vlan_vid_len_get, _openflow.ofp_action_vlan_vid_len_set)
    __swig_setmethods__["vlan_vid"] = _openflow.ofp_action_vlan_vid_vlan_vid_set
    __swig_getmethods__["vlan_vid"] = _openflow.ofp_action_vlan_vid_vlan_vid_get
    if _newclass:vlan_vid = _swig_property(_openflow.ofp_action_vlan_vid_vlan_vid_get, _openflow.ofp_action_vlan_vid_vlan_vid_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_vlan_vid_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_vlan_vid_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_vlan_vid_pad_get, _openflow.ofp_action_vlan_vid_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_vlan_vid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_vlan_vid
    __del__ = lambda self : None;
ofp_action_vlan_vid_swigregister = _openflow.ofp_action_vlan_vid_swigregister
ofp_action_vlan_vid_swigregister(ofp_action_vlan_vid)

class ofp_action_vlan_pcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vlan_pcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vlan_pcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_vlan_pcp_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_vlan_pcp_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_vlan_pcp_type_get, _openflow.ofp_action_vlan_pcp_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_vlan_pcp_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_vlan_pcp_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_vlan_pcp_len_get, _openflow.ofp_action_vlan_pcp_len_set)
    __swig_setmethods__["vlan_pcp"] = _openflow.ofp_action_vlan_pcp_vlan_pcp_set
    __swig_getmethods__["vlan_pcp"] = _openflow.ofp_action_vlan_pcp_vlan_pcp_get
    if _newclass:vlan_pcp = _swig_property(_openflow.ofp_action_vlan_pcp_vlan_pcp_get, _openflow.ofp_action_vlan_pcp_vlan_pcp_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_vlan_pcp_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_vlan_pcp_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_vlan_pcp_pad_get, _openflow.ofp_action_vlan_pcp_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_vlan_pcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_vlan_pcp
    __del__ = lambda self : None;
ofp_action_vlan_pcp_swigregister = _openflow.ofp_action_vlan_pcp_swigregister
ofp_action_vlan_pcp_swigregister(ofp_action_vlan_pcp)

class ofp_action_dl_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_dl_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_dl_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_dl_addr_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_dl_addr_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_dl_addr_type_get, _openflow.ofp_action_dl_addr_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_dl_addr_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_dl_addr_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_dl_addr_len_get, _openflow.ofp_action_dl_addr_len_set)
    __swig_setmethods__["dl_addr"] = _openflow.ofp_action_dl_addr_dl_addr_set
    __swig_getmethods__["dl_addr"] = _openflow.ofp_action_dl_addr_dl_addr_get
    if _newclass:dl_addr = _swig_property(_openflow.ofp_action_dl_addr_dl_addr_get, _openflow.ofp_action_dl_addr_dl_addr_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_dl_addr_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_dl_addr_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_dl_addr_pad_get, _openflow.ofp_action_dl_addr_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_dl_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_dl_addr
    __del__ = lambda self : None;
ofp_action_dl_addr_swigregister = _openflow.ofp_action_dl_addr_swigregister
ofp_action_dl_addr_swigregister(ofp_action_dl_addr)

class ofp_action_nw_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_nw_addr_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_nw_addr_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_nw_addr_type_get, _openflow.ofp_action_nw_addr_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_nw_addr_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_nw_addr_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_nw_addr_len_get, _openflow.ofp_action_nw_addr_len_set)
    __swig_setmethods__["nw_addr"] = _openflow.ofp_action_nw_addr_nw_addr_set
    __swig_getmethods__["nw_addr"] = _openflow.ofp_action_nw_addr_nw_addr_get
    if _newclass:nw_addr = _swig_property(_openflow.ofp_action_nw_addr_nw_addr_get, _openflow.ofp_action_nw_addr_nw_addr_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_nw_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_nw_addr
    __del__ = lambda self : None;
ofp_action_nw_addr_swigregister = _openflow.ofp_action_nw_addr_swigregister
ofp_action_nw_addr_swigregister(ofp_action_nw_addr)

class ofp_action_tp_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_tp_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_tp_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_tp_port_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_tp_port_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_tp_port_type_get, _openflow.ofp_action_tp_port_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_tp_port_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_tp_port_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_tp_port_len_get, _openflow.ofp_action_tp_port_len_set)
    __swig_setmethods__["tp_port"] = _openflow.ofp_action_tp_port_tp_port_set
    __swig_getmethods__["tp_port"] = _openflow.ofp_action_tp_port_tp_port_get
    if _newclass:tp_port = _swig_property(_openflow.ofp_action_tp_port_tp_port_get, _openflow.ofp_action_tp_port_tp_port_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_tp_port_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_tp_port_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_tp_port_pad_get, _openflow.ofp_action_tp_port_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_tp_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_tp_port
    __del__ = lambda self : None;
ofp_action_tp_port_swigregister = _openflow.ofp_action_tp_port_swigregister
ofp_action_tp_port_swigregister(ofp_action_tp_port)

class ofp_action_nw_tos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_nw_tos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_nw_tos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_nw_tos_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_nw_tos_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_nw_tos_type_get, _openflow.ofp_action_nw_tos_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_nw_tos_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_nw_tos_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_nw_tos_len_get, _openflow.ofp_action_nw_tos_len_set)
    __swig_setmethods__["nw_tos"] = _openflow.ofp_action_nw_tos_nw_tos_set
    __swig_getmethods__["nw_tos"] = _openflow.ofp_action_nw_tos_nw_tos_get
    if _newclass:nw_tos = _swig_property(_openflow.ofp_action_nw_tos_nw_tos_get, _openflow.ofp_action_nw_tos_nw_tos_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_nw_tos_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_nw_tos_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_nw_tos_pad_get, _openflow.ofp_action_nw_tos_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_nw_tos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_nw_tos
    __del__ = lambda self : None;
ofp_action_nw_tos_swigregister = _openflow.ofp_action_nw_tos_swigregister
ofp_action_nw_tos_swigregister(ofp_action_nw_tos)

class ofp_action_vendor_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_vendor_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_vendor_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_vendor_header_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_vendor_header_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_vendor_header_type_get, _openflow.ofp_action_vendor_header_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_vendor_header_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_vendor_header_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_vendor_header_len_get, _openflow.ofp_action_vendor_header_len_set)
    __swig_setmethods__["vendor"] = _openflow.ofp_action_vendor_header_vendor_set
    __swig_getmethods__["vendor"] = _openflow.ofp_action_vendor_header_vendor_get
    if _newclass:vendor = _swig_property(_openflow.ofp_action_vendor_header_vendor_get, _openflow.ofp_action_vendor_header_vendor_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_vendor_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_vendor_header
    __del__ = lambda self : None;
ofp_action_vendor_header_swigregister = _openflow.ofp_action_vendor_header_swigregister
ofp_action_vendor_header_swigregister(ofp_action_vendor_header)

class ofp_action_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_header_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_header_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_header_type_get, _openflow.ofp_action_header_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_header_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_header_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_header_len_get, _openflow.ofp_action_header_len_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_header_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_header_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_header_pad_get, _openflow.ofp_action_header_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_header
    __del__ = lambda self : None;
ofp_action_header_swigregister = _openflow.ofp_action_header_swigregister
ofp_action_header_swigregister(ofp_action_header)

class ofp_packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_packet_out_header_set
    __swig_getmethods__["header"] = _openflow.ofp_packet_out_header_get
    if _newclass:header = _swig_property(_openflow.ofp_packet_out_header_get, _openflow.ofp_packet_out_header_set)
    __swig_setmethods__["buffer_id"] = _openflow.ofp_packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _openflow.ofp_packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_openflow.ofp_packet_out_buffer_id_get, _openflow.ofp_packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _openflow.ofp_packet_out_in_port_set
    __swig_getmethods__["in_port"] = _openflow.ofp_packet_out_in_port_get
    if _newclass:in_port = _swig_property(_openflow.ofp_packet_out_in_port_get, _openflow.ofp_packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _openflow.ofp_packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _openflow.ofp_packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_openflow.ofp_packet_out_actions_len_get, _openflow.ofp_packet_out_actions_len_set)
    __swig_setmethods__["actions"] = _openflow.ofp_packet_out_actions_set
    __swig_getmethods__["actions"] = _openflow.ofp_packet_out_actions_get
    if _newclass:actions = _swig_property(_openflow.ofp_packet_out_actions_get, _openflow.ofp_packet_out_actions_set)
    def __init__(self): 
        this = _openflow.new_ofp_packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_packet_out
    __del__ = lambda self : None;
ofp_packet_out_swigregister = _openflow.ofp_packet_out_swigregister
ofp_packet_out_swigregister(ofp_packet_out)

OFPFC_ADD = _openflow.OFPFC_ADD
OFPFC_MODIFY = _openflow.OFPFC_MODIFY
OFPFC_MODIFY_STRICT = _openflow.OFPFC_MODIFY_STRICT
OFPFC_DELETE = _openflow.OFPFC_DELETE
OFPFC_DELETE_STRICT = _openflow.OFPFC_DELETE_STRICT
OFPFW_IN_PORT = _openflow.OFPFW_IN_PORT
OFPFW_DL_VLAN = _openflow.OFPFW_DL_VLAN
OFPFW_DL_SRC = _openflow.OFPFW_DL_SRC
OFPFW_DL_DST = _openflow.OFPFW_DL_DST
OFPFW_DL_TYPE = _openflow.OFPFW_DL_TYPE
OFPFW_NW_PROTO = _openflow.OFPFW_NW_PROTO
OFPFW_TP_SRC = _openflow.OFPFW_TP_SRC
OFPFW_TP_DST = _openflow.OFPFW_TP_DST
OFPFW_NW_SRC_SHIFT = _openflow.OFPFW_NW_SRC_SHIFT
OFPFW_NW_SRC_BITS = _openflow.OFPFW_NW_SRC_BITS
OFPFW_NW_SRC_MASK = _openflow.OFPFW_NW_SRC_MASK
OFPFW_NW_SRC_ALL = _openflow.OFPFW_NW_SRC_ALL
OFPFW_NW_DST_SHIFT = _openflow.OFPFW_NW_DST_SHIFT
OFPFW_NW_DST_BITS = _openflow.OFPFW_NW_DST_BITS
OFPFW_NW_DST_MASK = _openflow.OFPFW_NW_DST_MASK
OFPFW_NW_DST_ALL = _openflow.OFPFW_NW_DST_ALL
OFPFW_DL_VLAN_PCP = _openflow.OFPFW_DL_VLAN_PCP
OFPFW_NW_TOS = _openflow.OFPFW_NW_TOS
OFPFW_ALL = _openflow.OFPFW_ALL
OFP_DL_TYPE_ETH2_CUTOFF = _openflow.OFP_DL_TYPE_ETH2_CUTOFF
OFP_DL_TYPE_NOT_ETH_TYPE = _openflow.OFP_DL_TYPE_NOT_ETH_TYPE
class ofp_match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wildcards"] = _openflow.ofp_match_wildcards_set
    __swig_getmethods__["wildcards"] = _openflow.ofp_match_wildcards_get
    if _newclass:wildcards = _swig_property(_openflow.ofp_match_wildcards_get, _openflow.ofp_match_wildcards_set)
    __swig_setmethods__["in_port"] = _openflow.ofp_match_in_port_set
    __swig_getmethods__["in_port"] = _openflow.ofp_match_in_port_get
    if _newclass:in_port = _swig_property(_openflow.ofp_match_in_port_get, _openflow.ofp_match_in_port_set)
    __swig_setmethods__["dl_src"] = _openflow.ofp_match_dl_src_set
    __swig_getmethods__["dl_src"] = _openflow.ofp_match_dl_src_get
    if _newclass:dl_src = _swig_property(_openflow.ofp_match_dl_src_get, _openflow.ofp_match_dl_src_set)
    __swig_setmethods__["dl_dst"] = _openflow.ofp_match_dl_dst_set
    __swig_getmethods__["dl_dst"] = _openflow.ofp_match_dl_dst_get
    if _newclass:dl_dst = _swig_property(_openflow.ofp_match_dl_dst_get, _openflow.ofp_match_dl_dst_set)
    __swig_setmethods__["dl_vlan"] = _openflow.ofp_match_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _openflow.ofp_match_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_openflow.ofp_match_dl_vlan_get, _openflow.ofp_match_dl_vlan_set)
    __swig_setmethods__["dl_vlan_pcp"] = _openflow.ofp_match_dl_vlan_pcp_set
    __swig_getmethods__["dl_vlan_pcp"] = _openflow.ofp_match_dl_vlan_pcp_get
    if _newclass:dl_vlan_pcp = _swig_property(_openflow.ofp_match_dl_vlan_pcp_get, _openflow.ofp_match_dl_vlan_pcp_set)
    __swig_setmethods__["pad1"] = _openflow.ofp_match_pad1_set
    __swig_getmethods__["pad1"] = _openflow.ofp_match_pad1_get
    if _newclass:pad1 = _swig_property(_openflow.ofp_match_pad1_get, _openflow.ofp_match_pad1_set)
    __swig_setmethods__["dl_type"] = _openflow.ofp_match_dl_type_set
    __swig_getmethods__["dl_type"] = _openflow.ofp_match_dl_type_get
    if _newclass:dl_type = _swig_property(_openflow.ofp_match_dl_type_get, _openflow.ofp_match_dl_type_set)
    __swig_setmethods__["nw_tos"] = _openflow.ofp_match_nw_tos_set
    __swig_getmethods__["nw_tos"] = _openflow.ofp_match_nw_tos_get
    if _newclass:nw_tos = _swig_property(_openflow.ofp_match_nw_tos_get, _openflow.ofp_match_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _openflow.ofp_match_nw_proto_set
    __swig_getmethods__["nw_proto"] = _openflow.ofp_match_nw_proto_get
    if _newclass:nw_proto = _swig_property(_openflow.ofp_match_nw_proto_get, _openflow.ofp_match_nw_proto_set)
    __swig_setmethods__["pad2"] = _openflow.ofp_match_pad2_set
    __swig_getmethods__["pad2"] = _openflow.ofp_match_pad2_get
    if _newclass:pad2 = _swig_property(_openflow.ofp_match_pad2_get, _openflow.ofp_match_pad2_set)
    __swig_setmethods__["nw_src"] = _openflow.ofp_match_nw_src_set
    __swig_getmethods__["nw_src"] = _openflow.ofp_match_nw_src_get
    if _newclass:nw_src = _swig_property(_openflow.ofp_match_nw_src_get, _openflow.ofp_match_nw_src_set)
    __swig_setmethods__["nw_dst"] = _openflow.ofp_match_nw_dst_set
    __swig_getmethods__["nw_dst"] = _openflow.ofp_match_nw_dst_get
    if _newclass:nw_dst = _swig_property(_openflow.ofp_match_nw_dst_get, _openflow.ofp_match_nw_dst_set)
    __swig_setmethods__["tp_src"] = _openflow.ofp_match_tp_src_set
    __swig_getmethods__["tp_src"] = _openflow.ofp_match_tp_src_get
    if _newclass:tp_src = _swig_property(_openflow.ofp_match_tp_src_get, _openflow.ofp_match_tp_src_set)
    __swig_setmethods__["tp_dst"] = _openflow.ofp_match_tp_dst_set
    __swig_getmethods__["tp_dst"] = _openflow.ofp_match_tp_dst_get
    if _newclass:tp_dst = _swig_property(_openflow.ofp_match_tp_dst_get, _openflow.ofp_match_tp_dst_set)
    def set_dl_src(self, *args): return _openflow.ofp_match_set_dl_src(self, *args)
    def set_dl_dst(self, *args): return _openflow.ofp_match_set_dl_dst(self, *args)
    def __init__(self): 
        this = _openflow.new_ofp_match()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_match
    __del__ = lambda self : None;
ofp_match_swigregister = _openflow.ofp_match_swigregister
ofp_match_swigregister(ofp_match)

OFP_FLOW_PERMANENT = _openflow.OFP_FLOW_PERMANENT
OFP_DEFAULT_PRIORITY = _openflow.OFP_DEFAULT_PRIORITY
OFPFF_SEND_FLOW_REM = _openflow.OFPFF_SEND_FLOW_REM
OFPFF_CHECK_OVERLAP = _openflow.OFPFF_CHECK_OVERLAP
OFPFF_EMERG = _openflow.OFPFF_EMERG
class ofp_flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_mod, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_flow_mod_header_set
    __swig_getmethods__["header"] = _openflow.ofp_flow_mod_header_get
    if _newclass:header = _swig_property(_openflow.ofp_flow_mod_header_get, _openflow.ofp_flow_mod_header_set)
    __swig_setmethods__["match"] = _openflow.ofp_flow_mod_match_set
    __swig_getmethods__["match"] = _openflow.ofp_flow_mod_match_get
    if _newclass:match = _swig_property(_openflow.ofp_flow_mod_match_get, _openflow.ofp_flow_mod_match_set)
    __swig_setmethods__["cookie"] = _openflow.ofp_flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _openflow.ofp_flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_openflow.ofp_flow_mod_cookie_get, _openflow.ofp_flow_mod_cookie_set)
    __swig_setmethods__["command"] = _openflow.ofp_flow_mod_command_set
    __swig_getmethods__["command"] = _openflow.ofp_flow_mod_command_get
    if _newclass:command = _swig_property(_openflow.ofp_flow_mod_command_get, _openflow.ofp_flow_mod_command_set)
    __swig_setmethods__["idle_timeout"] = _openflow.ofp_flow_mod_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _openflow.ofp_flow_mod_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_openflow.ofp_flow_mod_idle_timeout_get, _openflow.ofp_flow_mod_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _openflow.ofp_flow_mod_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _openflow.ofp_flow_mod_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_openflow.ofp_flow_mod_hard_timeout_get, _openflow.ofp_flow_mod_hard_timeout_set)
    __swig_setmethods__["priority"] = _openflow.ofp_flow_mod_priority_set
    __swig_getmethods__["priority"] = _openflow.ofp_flow_mod_priority_get
    if _newclass:priority = _swig_property(_openflow.ofp_flow_mod_priority_get, _openflow.ofp_flow_mod_priority_set)
    __swig_setmethods__["buffer_id"] = _openflow.ofp_flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _openflow.ofp_flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_openflow.ofp_flow_mod_buffer_id_get, _openflow.ofp_flow_mod_buffer_id_set)
    __swig_setmethods__["out_port"] = _openflow.ofp_flow_mod_out_port_set
    __swig_getmethods__["out_port"] = _openflow.ofp_flow_mod_out_port_get
    if _newclass:out_port = _swig_property(_openflow.ofp_flow_mod_out_port_get, _openflow.ofp_flow_mod_out_port_set)
    __swig_setmethods__["flags"] = _openflow.ofp_flow_mod_flags_set
    __swig_getmethods__["flags"] = _openflow.ofp_flow_mod_flags_get
    if _newclass:flags = _swig_property(_openflow.ofp_flow_mod_flags_get, _openflow.ofp_flow_mod_flags_set)
    __swig_setmethods__["actions"] = _openflow.ofp_flow_mod_actions_set
    __swig_getmethods__["actions"] = _openflow.ofp_flow_mod_actions_get
    if _newclass:actions = _swig_property(_openflow.ofp_flow_mod_actions_get, _openflow.ofp_flow_mod_actions_set)
    def __init__(self): 
        this = _openflow.new_ofp_flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_flow_mod
    __del__ = lambda self : None;
ofp_flow_mod_swigregister = _openflow.ofp_flow_mod_swigregister
ofp_flow_mod_swigregister(ofp_flow_mod)

OFPRR_IDLE_TIMEOUT = _openflow.OFPRR_IDLE_TIMEOUT
OFPRR_HARD_TIMEOUT = _openflow.OFPRR_HARD_TIMEOUT
OFPRR_DELETE = _openflow.OFPRR_DELETE
class ofp_flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_removed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_flow_removed_header_set
    __swig_getmethods__["header"] = _openflow.ofp_flow_removed_header_get
    if _newclass:header = _swig_property(_openflow.ofp_flow_removed_header_get, _openflow.ofp_flow_removed_header_set)
    __swig_setmethods__["match"] = _openflow.ofp_flow_removed_match_set
    __swig_getmethods__["match"] = _openflow.ofp_flow_removed_match_get
    if _newclass:match = _swig_property(_openflow.ofp_flow_removed_match_get, _openflow.ofp_flow_removed_match_set)
    __swig_setmethods__["cookie"] = _openflow.ofp_flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _openflow.ofp_flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_openflow.ofp_flow_removed_cookie_get, _openflow.ofp_flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _openflow.ofp_flow_removed_priority_set
    __swig_getmethods__["priority"] = _openflow.ofp_flow_removed_priority_get
    if _newclass:priority = _swig_property(_openflow.ofp_flow_removed_priority_get, _openflow.ofp_flow_removed_priority_set)
    __swig_setmethods__["reason"] = _openflow.ofp_flow_removed_reason_set
    __swig_getmethods__["reason"] = _openflow.ofp_flow_removed_reason_get
    if _newclass:reason = _swig_property(_openflow.ofp_flow_removed_reason_get, _openflow.ofp_flow_removed_reason_set)
    __swig_setmethods__["pad"] = _openflow.ofp_flow_removed_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_flow_removed_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_flow_removed_pad_get, _openflow.ofp_flow_removed_pad_set)
    __swig_setmethods__["duration_sec"] = _openflow.ofp_flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _openflow.ofp_flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_openflow.ofp_flow_removed_duration_sec_get, _openflow.ofp_flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _openflow.ofp_flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _openflow.ofp_flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_openflow.ofp_flow_removed_duration_nsec_get, _openflow.ofp_flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _openflow.ofp_flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _openflow.ofp_flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_openflow.ofp_flow_removed_idle_timeout_get, _openflow.ofp_flow_removed_idle_timeout_set)
    __swig_setmethods__["pad2"] = _openflow.ofp_flow_removed_pad2_set
    __swig_getmethods__["pad2"] = _openflow.ofp_flow_removed_pad2_get
    if _newclass:pad2 = _swig_property(_openflow.ofp_flow_removed_pad2_get, _openflow.ofp_flow_removed_pad2_set)
    __swig_setmethods__["packet_count"] = _openflow.ofp_flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _openflow.ofp_flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_openflow.ofp_flow_removed_packet_count_get, _openflow.ofp_flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _openflow.ofp_flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _openflow.ofp_flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_openflow.ofp_flow_removed_byte_count_get, _openflow.ofp_flow_removed_byte_count_set)
    def __init__(self): 
        this = _openflow.new_ofp_flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_flow_removed
    __del__ = lambda self : None;
ofp_flow_removed_swigregister = _openflow.ofp_flow_removed_swigregister
ofp_flow_removed_swigregister(ofp_flow_removed)

OFPET_HELLO_FAILED = _openflow.OFPET_HELLO_FAILED
OFPET_BAD_REQUEST = _openflow.OFPET_BAD_REQUEST
OFPET_BAD_ACTION = _openflow.OFPET_BAD_ACTION
OFPET_FLOW_MOD_FAILED = _openflow.OFPET_FLOW_MOD_FAILED
OFPET_PORT_MOD_FAILED = _openflow.OFPET_PORT_MOD_FAILED
OFPET_QUEUE_OP_FAILED = _openflow.OFPET_QUEUE_OP_FAILED
OFPHFC_INCOMPATIBLE = _openflow.OFPHFC_INCOMPATIBLE
OFPHFC_EPERM = _openflow.OFPHFC_EPERM
OFPBRC_BAD_VERSION = _openflow.OFPBRC_BAD_VERSION
OFPBRC_BAD_TYPE = _openflow.OFPBRC_BAD_TYPE
OFPBRC_BAD_STAT = _openflow.OFPBRC_BAD_STAT
OFPBRC_BAD_VENDOR = _openflow.OFPBRC_BAD_VENDOR
OFPBRC_BAD_SUBTYPE = _openflow.OFPBRC_BAD_SUBTYPE
OFPBRC_EPERM = _openflow.OFPBRC_EPERM
OFPBRC_BAD_LEN = _openflow.OFPBRC_BAD_LEN
OFPBRC_BUFFER_EMPTY = _openflow.OFPBRC_BUFFER_EMPTY
OFPBRC_BUFFER_UNKNOWN = _openflow.OFPBRC_BUFFER_UNKNOWN
OFPBAC_BAD_TYPE = _openflow.OFPBAC_BAD_TYPE
OFPBAC_BAD_LEN = _openflow.OFPBAC_BAD_LEN
OFPBAC_BAD_VENDOR = _openflow.OFPBAC_BAD_VENDOR
OFPBAC_BAD_VENDOR_TYPE = _openflow.OFPBAC_BAD_VENDOR_TYPE
OFPBAC_BAD_OUT_PORT = _openflow.OFPBAC_BAD_OUT_PORT
OFPBAC_BAD_ARGUMENT = _openflow.OFPBAC_BAD_ARGUMENT
OFPBAC_EPERM = _openflow.OFPBAC_EPERM
OFPBAC_TOO_MANY = _openflow.OFPBAC_TOO_MANY
OFPBAC_BAD_QUEUE = _openflow.OFPBAC_BAD_QUEUE
OFPFMFC_ALL_TABLES_FULL = _openflow.OFPFMFC_ALL_TABLES_FULL
OFPFMFC_OVERLAP = _openflow.OFPFMFC_OVERLAP
OFPFMFC_EPERM = _openflow.OFPFMFC_EPERM
OFPFMFC_BAD_EMERG_TIMEOUT = _openflow.OFPFMFC_BAD_EMERG_TIMEOUT
OFPFMFC_BAD_COMMAND = _openflow.OFPFMFC_BAD_COMMAND
OFPFMFC_UNSUPPORTED = _openflow.OFPFMFC_UNSUPPORTED
OFPPMFC_BAD_PORT = _openflow.OFPPMFC_BAD_PORT
OFPPMFC_BAD_HW_ADDR = _openflow.OFPPMFC_BAD_HW_ADDR
OFPQOFC_BAD_PORT = _openflow.OFPQOFC_BAD_PORT
OFPQOFC_BAD_QUEUE = _openflow.OFPQOFC_BAD_QUEUE
OFPQOFC_EPERM = _openflow.OFPQOFC_EPERM
class ofp_error_msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_error_msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_error_msg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_error_msg_header_set
    __swig_getmethods__["header"] = _openflow.ofp_error_msg_header_get
    if _newclass:header = _swig_property(_openflow.ofp_error_msg_header_get, _openflow.ofp_error_msg_header_set)
    __swig_setmethods__["type"] = _openflow.ofp_error_msg_type_set
    __swig_getmethods__["type"] = _openflow.ofp_error_msg_type_get
    if _newclass:type = _swig_property(_openflow.ofp_error_msg_type_get, _openflow.ofp_error_msg_type_set)
    __swig_setmethods__["code"] = _openflow.ofp_error_msg_code_set
    __swig_getmethods__["code"] = _openflow.ofp_error_msg_code_get
    if _newclass:code = _swig_property(_openflow.ofp_error_msg_code_get, _openflow.ofp_error_msg_code_set)
    __swig_setmethods__["data"] = _openflow.ofp_error_msg_data_set
    __swig_getmethods__["data"] = _openflow.ofp_error_msg_data_get
    if _newclass:data = _swig_property(_openflow.ofp_error_msg_data_get, _openflow.ofp_error_msg_data_set)
    def __init__(self): 
        this = _openflow.new_ofp_error_msg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_error_msg
    __del__ = lambda self : None;
ofp_error_msg_swigregister = _openflow.ofp_error_msg_swigregister
ofp_error_msg_swigregister(ofp_error_msg)

OFPST_DESC = _openflow.OFPST_DESC
OFPST_FLOW = _openflow.OFPST_FLOW
OFPST_AGGREGATE = _openflow.OFPST_AGGREGATE
OFPST_TABLE = _openflow.OFPST_TABLE
OFPST_PORT = _openflow.OFPST_PORT
OFPST_QUEUE = _openflow.OFPST_QUEUE
OFPST_VENDOR = _openflow.OFPST_VENDOR
class ofp_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_stats_request_header_set
    __swig_getmethods__["header"] = _openflow.ofp_stats_request_header_get
    if _newclass:header = _swig_property(_openflow.ofp_stats_request_header_get, _openflow.ofp_stats_request_header_set)
    __swig_setmethods__["type"] = _openflow.ofp_stats_request_type_set
    __swig_getmethods__["type"] = _openflow.ofp_stats_request_type_get
    if _newclass:type = _swig_property(_openflow.ofp_stats_request_type_get, _openflow.ofp_stats_request_type_set)
    __swig_setmethods__["flags"] = _openflow.ofp_stats_request_flags_set
    __swig_getmethods__["flags"] = _openflow.ofp_stats_request_flags_get
    if _newclass:flags = _swig_property(_openflow.ofp_stats_request_flags_get, _openflow.ofp_stats_request_flags_set)
    __swig_setmethods__["body"] = _openflow.ofp_stats_request_body_set
    __swig_getmethods__["body"] = _openflow.ofp_stats_request_body_get
    if _newclass:body = _swig_property(_openflow.ofp_stats_request_body_get, _openflow.ofp_stats_request_body_set)
    def __init__(self): 
        this = _openflow.new_ofp_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_stats_request
    __del__ = lambda self : None;
ofp_stats_request_swigregister = _openflow.ofp_stats_request_swigregister
ofp_stats_request_swigregister(ofp_stats_request)

OFPSF_REPLY_MORE = _openflow.OFPSF_REPLY_MORE
class ofp_stats_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_stats_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_stats_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_stats_reply_header_set
    __swig_getmethods__["header"] = _openflow.ofp_stats_reply_header_get
    if _newclass:header = _swig_property(_openflow.ofp_stats_reply_header_get, _openflow.ofp_stats_reply_header_set)
    __swig_setmethods__["type"] = _openflow.ofp_stats_reply_type_set
    __swig_getmethods__["type"] = _openflow.ofp_stats_reply_type_get
    if _newclass:type = _swig_property(_openflow.ofp_stats_reply_type_get, _openflow.ofp_stats_reply_type_set)
    __swig_setmethods__["flags"] = _openflow.ofp_stats_reply_flags_set
    __swig_getmethods__["flags"] = _openflow.ofp_stats_reply_flags_get
    if _newclass:flags = _swig_property(_openflow.ofp_stats_reply_flags_get, _openflow.ofp_stats_reply_flags_set)
    __swig_setmethods__["body"] = _openflow.ofp_stats_reply_body_set
    __swig_getmethods__["body"] = _openflow.ofp_stats_reply_body_get
    if _newclass:body = _swig_property(_openflow.ofp_stats_reply_body_get, _openflow.ofp_stats_reply_body_set)
    def __init__(self): 
        this = _openflow.new_ofp_stats_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_stats_reply
    __del__ = lambda self : None;
ofp_stats_reply_swigregister = _openflow.ofp_stats_reply_swigregister
ofp_stats_reply_swigregister(ofp_stats_reply)

DESC_STR_LEN = _openflow.DESC_STR_LEN
SERIAL_NUM_LEN = _openflow.SERIAL_NUM_LEN
class ofp_desc_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_desc_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_desc_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mfr_desc"] = _openflow.ofp_desc_stats_mfr_desc_set
    __swig_getmethods__["mfr_desc"] = _openflow.ofp_desc_stats_mfr_desc_get
    if _newclass:mfr_desc = _swig_property(_openflow.ofp_desc_stats_mfr_desc_get, _openflow.ofp_desc_stats_mfr_desc_set)
    __swig_setmethods__["hw_desc"] = _openflow.ofp_desc_stats_hw_desc_set
    __swig_getmethods__["hw_desc"] = _openflow.ofp_desc_stats_hw_desc_get
    if _newclass:hw_desc = _swig_property(_openflow.ofp_desc_stats_hw_desc_get, _openflow.ofp_desc_stats_hw_desc_set)
    __swig_setmethods__["sw_desc"] = _openflow.ofp_desc_stats_sw_desc_set
    __swig_getmethods__["sw_desc"] = _openflow.ofp_desc_stats_sw_desc_get
    if _newclass:sw_desc = _swig_property(_openflow.ofp_desc_stats_sw_desc_get, _openflow.ofp_desc_stats_sw_desc_set)
    __swig_setmethods__["serial_num"] = _openflow.ofp_desc_stats_serial_num_set
    __swig_getmethods__["serial_num"] = _openflow.ofp_desc_stats_serial_num_get
    if _newclass:serial_num = _swig_property(_openflow.ofp_desc_stats_serial_num_get, _openflow.ofp_desc_stats_serial_num_set)
    __swig_setmethods__["dp_desc"] = _openflow.ofp_desc_stats_dp_desc_set
    __swig_getmethods__["dp_desc"] = _openflow.ofp_desc_stats_dp_desc_get
    if _newclass:dp_desc = _swig_property(_openflow.ofp_desc_stats_dp_desc_get, _openflow.ofp_desc_stats_dp_desc_set)
    def __init__(self): 
        this = _openflow.new_ofp_desc_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_desc_stats
    __del__ = lambda self : None;
ofp_desc_stats_swigregister = _openflow.ofp_desc_stats_swigregister
ofp_desc_stats_swigregister(ofp_desc_stats)

class ofp_flow_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _openflow.ofp_flow_stats_request_match_set
    __swig_getmethods__["match"] = _openflow.ofp_flow_stats_request_match_get
    if _newclass:match = _swig_property(_openflow.ofp_flow_stats_request_match_get, _openflow.ofp_flow_stats_request_match_set)
    __swig_setmethods__["table_id"] = _openflow.ofp_flow_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _openflow.ofp_flow_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_openflow.ofp_flow_stats_request_table_id_get, _openflow.ofp_flow_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _openflow.ofp_flow_stats_request_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_flow_stats_request_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_flow_stats_request_pad_get, _openflow.ofp_flow_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _openflow.ofp_flow_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _openflow.ofp_flow_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_openflow.ofp_flow_stats_request_out_port_get, _openflow.ofp_flow_stats_request_out_port_set)
    def __init__(self): 
        this = _openflow.new_ofp_flow_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_flow_stats_request
    __del__ = lambda self : None;
ofp_flow_stats_request_swigregister = _openflow.ofp_flow_stats_request_swigregister
ofp_flow_stats_request_swigregister(ofp_flow_stats_request)

class ofp_flow_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_flow_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_flow_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _openflow.ofp_flow_stats_length_set
    __swig_getmethods__["length"] = _openflow.ofp_flow_stats_length_get
    if _newclass:length = _swig_property(_openflow.ofp_flow_stats_length_get, _openflow.ofp_flow_stats_length_set)
    __swig_setmethods__["table_id"] = _openflow.ofp_flow_stats_table_id_set
    __swig_getmethods__["table_id"] = _openflow.ofp_flow_stats_table_id_get
    if _newclass:table_id = _swig_property(_openflow.ofp_flow_stats_table_id_get, _openflow.ofp_flow_stats_table_id_set)
    __swig_setmethods__["pad"] = _openflow.ofp_flow_stats_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_flow_stats_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_flow_stats_pad_get, _openflow.ofp_flow_stats_pad_set)
    __swig_setmethods__["match"] = _openflow.ofp_flow_stats_match_set
    __swig_getmethods__["match"] = _openflow.ofp_flow_stats_match_get
    if _newclass:match = _swig_property(_openflow.ofp_flow_stats_match_get, _openflow.ofp_flow_stats_match_set)
    __swig_setmethods__["duration_sec"] = _openflow.ofp_flow_stats_duration_sec_set
    __swig_getmethods__["duration_sec"] = _openflow.ofp_flow_stats_duration_sec_get
    if _newclass:duration_sec = _swig_property(_openflow.ofp_flow_stats_duration_sec_get, _openflow.ofp_flow_stats_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _openflow.ofp_flow_stats_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _openflow.ofp_flow_stats_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_openflow.ofp_flow_stats_duration_nsec_get, _openflow.ofp_flow_stats_duration_nsec_set)
    __swig_setmethods__["priority"] = _openflow.ofp_flow_stats_priority_set
    __swig_getmethods__["priority"] = _openflow.ofp_flow_stats_priority_get
    if _newclass:priority = _swig_property(_openflow.ofp_flow_stats_priority_get, _openflow.ofp_flow_stats_priority_set)
    __swig_setmethods__["idle_timeout"] = _openflow.ofp_flow_stats_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _openflow.ofp_flow_stats_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_openflow.ofp_flow_stats_idle_timeout_get, _openflow.ofp_flow_stats_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _openflow.ofp_flow_stats_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _openflow.ofp_flow_stats_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_openflow.ofp_flow_stats_hard_timeout_get, _openflow.ofp_flow_stats_hard_timeout_set)
    __swig_setmethods__["pad2"] = _openflow.ofp_flow_stats_pad2_set
    __swig_getmethods__["pad2"] = _openflow.ofp_flow_stats_pad2_get
    if _newclass:pad2 = _swig_property(_openflow.ofp_flow_stats_pad2_get, _openflow.ofp_flow_stats_pad2_set)
    __swig_setmethods__["cookie"] = _openflow.ofp_flow_stats_cookie_set
    __swig_getmethods__["cookie"] = _openflow.ofp_flow_stats_cookie_get
    if _newclass:cookie = _swig_property(_openflow.ofp_flow_stats_cookie_get, _openflow.ofp_flow_stats_cookie_set)
    __swig_setmethods__["packet_count"] = _openflow.ofp_flow_stats_packet_count_set
    __swig_getmethods__["packet_count"] = _openflow.ofp_flow_stats_packet_count_get
    if _newclass:packet_count = _swig_property(_openflow.ofp_flow_stats_packet_count_get, _openflow.ofp_flow_stats_packet_count_set)
    __swig_setmethods__["byte_count"] = _openflow.ofp_flow_stats_byte_count_set
    __swig_getmethods__["byte_count"] = _openflow.ofp_flow_stats_byte_count_get
    if _newclass:byte_count = _swig_property(_openflow.ofp_flow_stats_byte_count_get, _openflow.ofp_flow_stats_byte_count_set)
    __swig_setmethods__["actions"] = _openflow.ofp_flow_stats_actions_set
    __swig_getmethods__["actions"] = _openflow.ofp_flow_stats_actions_get
    if _newclass:actions = _swig_property(_openflow.ofp_flow_stats_actions_get, _openflow.ofp_flow_stats_actions_set)
    def __init__(self): 
        this = _openflow.new_ofp_flow_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_flow_stats
    __del__ = lambda self : None;
ofp_flow_stats_swigregister = _openflow.ofp_flow_stats_swigregister
ofp_flow_stats_swigregister(ofp_flow_stats)

class ofp_aggregate_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_aggregate_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_aggregate_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _openflow.ofp_aggregate_stats_request_match_set
    __swig_getmethods__["match"] = _openflow.ofp_aggregate_stats_request_match_get
    if _newclass:match = _swig_property(_openflow.ofp_aggregate_stats_request_match_get, _openflow.ofp_aggregate_stats_request_match_set)
    __swig_setmethods__["table_id"] = _openflow.ofp_aggregate_stats_request_table_id_set
    __swig_getmethods__["table_id"] = _openflow.ofp_aggregate_stats_request_table_id_get
    if _newclass:table_id = _swig_property(_openflow.ofp_aggregate_stats_request_table_id_get, _openflow.ofp_aggregate_stats_request_table_id_set)
    __swig_setmethods__["pad"] = _openflow.ofp_aggregate_stats_request_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_aggregate_stats_request_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_aggregate_stats_request_pad_get, _openflow.ofp_aggregate_stats_request_pad_set)
    __swig_setmethods__["out_port"] = _openflow.ofp_aggregate_stats_request_out_port_set
    __swig_getmethods__["out_port"] = _openflow.ofp_aggregate_stats_request_out_port_get
    if _newclass:out_port = _swig_property(_openflow.ofp_aggregate_stats_request_out_port_get, _openflow.ofp_aggregate_stats_request_out_port_set)
    def __init__(self): 
        this = _openflow.new_ofp_aggregate_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_aggregate_stats_request
    __del__ = lambda self : None;
ofp_aggregate_stats_request_swigregister = _openflow.ofp_aggregate_stats_request_swigregister
ofp_aggregate_stats_request_swigregister(ofp_aggregate_stats_request)

class ofp_aggregate_stats_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_aggregate_stats_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_aggregate_stats_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_count"] = _openflow.ofp_aggregate_stats_reply_packet_count_set
    __swig_getmethods__["packet_count"] = _openflow.ofp_aggregate_stats_reply_packet_count_get
    if _newclass:packet_count = _swig_property(_openflow.ofp_aggregate_stats_reply_packet_count_get, _openflow.ofp_aggregate_stats_reply_packet_count_set)
    __swig_setmethods__["byte_count"] = _openflow.ofp_aggregate_stats_reply_byte_count_set
    __swig_getmethods__["byte_count"] = _openflow.ofp_aggregate_stats_reply_byte_count_get
    if _newclass:byte_count = _swig_property(_openflow.ofp_aggregate_stats_reply_byte_count_get, _openflow.ofp_aggregate_stats_reply_byte_count_set)
    __swig_setmethods__["flow_count"] = _openflow.ofp_aggregate_stats_reply_flow_count_set
    __swig_getmethods__["flow_count"] = _openflow.ofp_aggregate_stats_reply_flow_count_get
    if _newclass:flow_count = _swig_property(_openflow.ofp_aggregate_stats_reply_flow_count_get, _openflow.ofp_aggregate_stats_reply_flow_count_set)
    __swig_setmethods__["pad"] = _openflow.ofp_aggregate_stats_reply_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_aggregate_stats_reply_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_aggregate_stats_reply_pad_get, _openflow.ofp_aggregate_stats_reply_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_aggregate_stats_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_aggregate_stats_reply
    __del__ = lambda self : None;
ofp_aggregate_stats_reply_swigregister = _openflow.ofp_aggregate_stats_reply_swigregister
ofp_aggregate_stats_reply_swigregister(ofp_aggregate_stats_reply)

class ofp_table_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_table_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_table_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _openflow.ofp_table_stats_table_id_set
    __swig_getmethods__["table_id"] = _openflow.ofp_table_stats_table_id_get
    if _newclass:table_id = _swig_property(_openflow.ofp_table_stats_table_id_get, _openflow.ofp_table_stats_table_id_set)
    __swig_setmethods__["pad"] = _openflow.ofp_table_stats_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_table_stats_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_table_stats_pad_get, _openflow.ofp_table_stats_pad_set)
    __swig_setmethods__["name"] = _openflow.ofp_table_stats_name_set
    __swig_getmethods__["name"] = _openflow.ofp_table_stats_name_get
    if _newclass:name = _swig_property(_openflow.ofp_table_stats_name_get, _openflow.ofp_table_stats_name_set)
    __swig_setmethods__["wildcards"] = _openflow.ofp_table_stats_wildcards_set
    __swig_getmethods__["wildcards"] = _openflow.ofp_table_stats_wildcards_get
    if _newclass:wildcards = _swig_property(_openflow.ofp_table_stats_wildcards_get, _openflow.ofp_table_stats_wildcards_set)
    __swig_setmethods__["max_entries"] = _openflow.ofp_table_stats_max_entries_set
    __swig_getmethods__["max_entries"] = _openflow.ofp_table_stats_max_entries_get
    if _newclass:max_entries = _swig_property(_openflow.ofp_table_stats_max_entries_get, _openflow.ofp_table_stats_max_entries_set)
    __swig_setmethods__["active_count"] = _openflow.ofp_table_stats_active_count_set
    __swig_getmethods__["active_count"] = _openflow.ofp_table_stats_active_count_get
    if _newclass:active_count = _swig_property(_openflow.ofp_table_stats_active_count_get, _openflow.ofp_table_stats_active_count_set)
    __swig_setmethods__["lookup_count"] = _openflow.ofp_table_stats_lookup_count_set
    __swig_getmethods__["lookup_count"] = _openflow.ofp_table_stats_lookup_count_get
    if _newclass:lookup_count = _swig_property(_openflow.ofp_table_stats_lookup_count_get, _openflow.ofp_table_stats_lookup_count_set)
    __swig_setmethods__["matched_count"] = _openflow.ofp_table_stats_matched_count_set
    __swig_getmethods__["matched_count"] = _openflow.ofp_table_stats_matched_count_get
    if _newclass:matched_count = _swig_property(_openflow.ofp_table_stats_matched_count_get, _openflow.ofp_table_stats_matched_count_set)
    def __init__(self): 
        this = _openflow.new_ofp_table_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_table_stats
    __del__ = lambda self : None;
ofp_table_stats_swigregister = _openflow.ofp_table_stats_swigregister
ofp_table_stats_swigregister(ofp_table_stats)

class ofp_port_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _openflow.ofp_port_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _openflow.ofp_port_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_openflow.ofp_port_stats_request_port_no_get, _openflow.ofp_port_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _openflow.ofp_port_stats_request_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_port_stats_request_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_port_stats_request_pad_get, _openflow.ofp_port_stats_request_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_port_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_port_stats_request
    __del__ = lambda self : None;
ofp_port_stats_request_swigregister = _openflow.ofp_port_stats_request_swigregister
ofp_port_stats_request_swigregister(ofp_port_stats_request)

class ofp_port_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_port_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_port_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _openflow.ofp_port_stats_port_no_set
    __swig_getmethods__["port_no"] = _openflow.ofp_port_stats_port_no_get
    if _newclass:port_no = _swig_property(_openflow.ofp_port_stats_port_no_get, _openflow.ofp_port_stats_port_no_set)
    __swig_setmethods__["pad"] = _openflow.ofp_port_stats_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_port_stats_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_port_stats_pad_get, _openflow.ofp_port_stats_pad_set)
    __swig_setmethods__["rx_packets"] = _openflow.ofp_port_stats_rx_packets_set
    __swig_getmethods__["rx_packets"] = _openflow.ofp_port_stats_rx_packets_get
    if _newclass:rx_packets = _swig_property(_openflow.ofp_port_stats_rx_packets_get, _openflow.ofp_port_stats_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _openflow.ofp_port_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _openflow.ofp_port_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_openflow.ofp_port_stats_tx_packets_get, _openflow.ofp_port_stats_tx_packets_set)
    __swig_setmethods__["rx_bytes"] = _openflow.ofp_port_stats_rx_bytes_set
    __swig_getmethods__["rx_bytes"] = _openflow.ofp_port_stats_rx_bytes_get
    if _newclass:rx_bytes = _swig_property(_openflow.ofp_port_stats_rx_bytes_get, _openflow.ofp_port_stats_rx_bytes_set)
    __swig_setmethods__["tx_bytes"] = _openflow.ofp_port_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _openflow.ofp_port_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_openflow.ofp_port_stats_tx_bytes_get, _openflow.ofp_port_stats_tx_bytes_set)
    __swig_setmethods__["rx_dropped"] = _openflow.ofp_port_stats_rx_dropped_set
    __swig_getmethods__["rx_dropped"] = _openflow.ofp_port_stats_rx_dropped_get
    if _newclass:rx_dropped = _swig_property(_openflow.ofp_port_stats_rx_dropped_get, _openflow.ofp_port_stats_rx_dropped_set)
    __swig_setmethods__["tx_dropped"] = _openflow.ofp_port_stats_tx_dropped_set
    __swig_getmethods__["tx_dropped"] = _openflow.ofp_port_stats_tx_dropped_get
    if _newclass:tx_dropped = _swig_property(_openflow.ofp_port_stats_tx_dropped_get, _openflow.ofp_port_stats_tx_dropped_set)
    __swig_setmethods__["rx_errors"] = _openflow.ofp_port_stats_rx_errors_set
    __swig_getmethods__["rx_errors"] = _openflow.ofp_port_stats_rx_errors_get
    if _newclass:rx_errors = _swig_property(_openflow.ofp_port_stats_rx_errors_get, _openflow.ofp_port_stats_rx_errors_set)
    __swig_setmethods__["tx_errors"] = _openflow.ofp_port_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _openflow.ofp_port_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_openflow.ofp_port_stats_tx_errors_get, _openflow.ofp_port_stats_tx_errors_set)
    __swig_setmethods__["rx_frame_err"] = _openflow.ofp_port_stats_rx_frame_err_set
    __swig_getmethods__["rx_frame_err"] = _openflow.ofp_port_stats_rx_frame_err_get
    if _newclass:rx_frame_err = _swig_property(_openflow.ofp_port_stats_rx_frame_err_get, _openflow.ofp_port_stats_rx_frame_err_set)
    __swig_setmethods__["rx_over_err"] = _openflow.ofp_port_stats_rx_over_err_set
    __swig_getmethods__["rx_over_err"] = _openflow.ofp_port_stats_rx_over_err_get
    if _newclass:rx_over_err = _swig_property(_openflow.ofp_port_stats_rx_over_err_get, _openflow.ofp_port_stats_rx_over_err_set)
    __swig_setmethods__["rx_crc_err"] = _openflow.ofp_port_stats_rx_crc_err_set
    __swig_getmethods__["rx_crc_err"] = _openflow.ofp_port_stats_rx_crc_err_get
    if _newclass:rx_crc_err = _swig_property(_openflow.ofp_port_stats_rx_crc_err_get, _openflow.ofp_port_stats_rx_crc_err_set)
    __swig_setmethods__["collisions"] = _openflow.ofp_port_stats_collisions_set
    __swig_getmethods__["collisions"] = _openflow.ofp_port_stats_collisions_get
    if _newclass:collisions = _swig_property(_openflow.ofp_port_stats_collisions_get, _openflow.ofp_port_stats_collisions_set)
    def __init__(self): 
        this = _openflow.new_ofp_port_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_port_stats
    __del__ = lambda self : None;
ofp_port_stats_swigregister = _openflow.ofp_port_stats_swigregister
ofp_port_stats_swigregister(ofp_port_stats)

class ofp_vendor_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_vendor_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_vendor_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_vendor_header_header_set
    __swig_getmethods__["header"] = _openflow.ofp_vendor_header_header_get
    if _newclass:header = _swig_property(_openflow.ofp_vendor_header_header_get, _openflow.ofp_vendor_header_header_set)
    __swig_setmethods__["vendor"] = _openflow.ofp_vendor_header_vendor_set
    __swig_getmethods__["vendor"] = _openflow.ofp_vendor_header_vendor_get
    if _newclass:vendor = _swig_property(_openflow.ofp_vendor_header_vendor_get, _openflow.ofp_vendor_header_vendor_set)
    def __init__(self): 
        this = _openflow.new_ofp_vendor_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_vendor_header
    __del__ = lambda self : None;
ofp_vendor_header_swigregister = _openflow.ofp_vendor_header_swigregister
ofp_vendor_header_swigregister(ofp_vendor_header)

OFPQ_ALL = _openflow.OFPQ_ALL
OFPQ_MIN_RATE_UNCFG = _openflow.OFPQ_MIN_RATE_UNCFG
OFPQT_NONE = _openflow.OFPQT_NONE
OFPQT_MIN_RATE = _openflow.OFPQT_MIN_RATE
class ofp_queue_prop_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["property"] = _openflow.ofp_queue_prop_header_property_set
    __swig_getmethods__["property"] = _openflow.ofp_queue_prop_header_property_get
    if _newclass:property = _swig_property(_openflow.ofp_queue_prop_header_property_get, _openflow.ofp_queue_prop_header_property_set)
    __swig_setmethods__["len"] = _openflow.ofp_queue_prop_header_len_set
    __swig_getmethods__["len"] = _openflow.ofp_queue_prop_header_len_get
    if _newclass:len = _swig_property(_openflow.ofp_queue_prop_header_len_get, _openflow.ofp_queue_prop_header_len_set)
    __swig_setmethods__["pad"] = _openflow.ofp_queue_prop_header_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_queue_prop_header_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_queue_prop_header_pad_get, _openflow.ofp_queue_prop_header_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_queue_prop_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_queue_prop_header
    __del__ = lambda self : None;
ofp_queue_prop_header_swigregister = _openflow.ofp_queue_prop_header_swigregister
ofp_queue_prop_header_swigregister(ofp_queue_prop_header)

class ofp_queue_prop_min_rate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_prop_min_rate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_prop_min_rate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prop_header"] = _openflow.ofp_queue_prop_min_rate_prop_header_set
    __swig_getmethods__["prop_header"] = _openflow.ofp_queue_prop_min_rate_prop_header_get
    if _newclass:prop_header = _swig_property(_openflow.ofp_queue_prop_min_rate_prop_header_get, _openflow.ofp_queue_prop_min_rate_prop_header_set)
    __swig_setmethods__["rate"] = _openflow.ofp_queue_prop_min_rate_rate_set
    __swig_getmethods__["rate"] = _openflow.ofp_queue_prop_min_rate_rate_get
    if _newclass:rate = _swig_property(_openflow.ofp_queue_prop_min_rate_rate_get, _openflow.ofp_queue_prop_min_rate_rate_set)
    __swig_setmethods__["pad"] = _openflow.ofp_queue_prop_min_rate_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_queue_prop_min_rate_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_queue_prop_min_rate_pad_get, _openflow.ofp_queue_prop_min_rate_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_queue_prop_min_rate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_queue_prop_min_rate
    __del__ = lambda self : None;
ofp_queue_prop_min_rate_swigregister = _openflow.ofp_queue_prop_min_rate_swigregister
ofp_queue_prop_min_rate_swigregister(ofp_queue_prop_min_rate)

class ofp_packet_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_packet_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_packet_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_id"] = _openflow.ofp_packet_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _openflow.ofp_packet_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_openflow.ofp_packet_queue_queue_id_get, _openflow.ofp_packet_queue_queue_id_set)
    __swig_setmethods__["len"] = _openflow.ofp_packet_queue_len_set
    __swig_getmethods__["len"] = _openflow.ofp_packet_queue_len_get
    if _newclass:len = _swig_property(_openflow.ofp_packet_queue_len_get, _openflow.ofp_packet_queue_len_set)
    __swig_setmethods__["pad"] = _openflow.ofp_packet_queue_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_packet_queue_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_packet_queue_pad_get, _openflow.ofp_packet_queue_pad_set)
    __swig_setmethods__["properties"] = _openflow.ofp_packet_queue_properties_set
    __swig_getmethods__["properties"] = _openflow.ofp_packet_queue_properties_get
    if _newclass:properties = _swig_property(_openflow.ofp_packet_queue_properties_get, _openflow.ofp_packet_queue_properties_set)
    def __init__(self): 
        this = _openflow.new_ofp_packet_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_packet_queue
    __del__ = lambda self : None;
ofp_packet_queue_swigregister = _openflow.ofp_packet_queue_swigregister
ofp_packet_queue_swigregister(ofp_packet_queue)

class ofp_queue_get_config_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_get_config_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_get_config_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_queue_get_config_request_header_set
    __swig_getmethods__["header"] = _openflow.ofp_queue_get_config_request_header_get
    if _newclass:header = _swig_property(_openflow.ofp_queue_get_config_request_header_get, _openflow.ofp_queue_get_config_request_header_set)
    __swig_setmethods__["port"] = _openflow.ofp_queue_get_config_request_port_set
    __swig_getmethods__["port"] = _openflow.ofp_queue_get_config_request_port_get
    if _newclass:port = _swig_property(_openflow.ofp_queue_get_config_request_port_get, _openflow.ofp_queue_get_config_request_port_set)
    __swig_setmethods__["pad"] = _openflow.ofp_queue_get_config_request_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_queue_get_config_request_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_queue_get_config_request_pad_get, _openflow.ofp_queue_get_config_request_pad_set)
    def __init__(self): 
        this = _openflow.new_ofp_queue_get_config_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_queue_get_config_request
    __del__ = lambda self : None;
ofp_queue_get_config_request_swigregister = _openflow.ofp_queue_get_config_request_swigregister
ofp_queue_get_config_request_swigregister(ofp_queue_get_config_request)

class ofp_queue_get_config_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_get_config_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_get_config_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _openflow.ofp_queue_get_config_reply_header_set
    __swig_getmethods__["header"] = _openflow.ofp_queue_get_config_reply_header_get
    if _newclass:header = _swig_property(_openflow.ofp_queue_get_config_reply_header_get, _openflow.ofp_queue_get_config_reply_header_set)
    __swig_setmethods__["port"] = _openflow.ofp_queue_get_config_reply_port_set
    __swig_getmethods__["port"] = _openflow.ofp_queue_get_config_reply_port_get
    if _newclass:port = _swig_property(_openflow.ofp_queue_get_config_reply_port_get, _openflow.ofp_queue_get_config_reply_port_set)
    __swig_setmethods__["pad"] = _openflow.ofp_queue_get_config_reply_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_queue_get_config_reply_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_queue_get_config_reply_pad_get, _openflow.ofp_queue_get_config_reply_pad_set)
    __swig_getmethods__["queues"] = _openflow.ofp_queue_get_config_reply_queues_get
    if _newclass:queues = _swig_property(_openflow.ofp_queue_get_config_reply_queues_get)
    def __init__(self): 
        this = _openflow.new_ofp_queue_get_config_reply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_queue_get_config_reply
    __del__ = lambda self : None;
ofp_queue_get_config_reply_swigregister = _openflow.ofp_queue_get_config_reply_swigregister
ofp_queue_get_config_reply_swigregister(ofp_queue_get_config_reply)

class ofp_action_enqueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_action_enqueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_action_enqueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _openflow.ofp_action_enqueue_type_set
    __swig_getmethods__["type"] = _openflow.ofp_action_enqueue_type_get
    if _newclass:type = _swig_property(_openflow.ofp_action_enqueue_type_get, _openflow.ofp_action_enqueue_type_set)
    __swig_setmethods__["len"] = _openflow.ofp_action_enqueue_len_set
    __swig_getmethods__["len"] = _openflow.ofp_action_enqueue_len_get
    if _newclass:len = _swig_property(_openflow.ofp_action_enqueue_len_get, _openflow.ofp_action_enqueue_len_set)
    __swig_setmethods__["port"] = _openflow.ofp_action_enqueue_port_set
    __swig_getmethods__["port"] = _openflow.ofp_action_enqueue_port_get
    if _newclass:port = _swig_property(_openflow.ofp_action_enqueue_port_get, _openflow.ofp_action_enqueue_port_set)
    __swig_setmethods__["pad"] = _openflow.ofp_action_enqueue_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_action_enqueue_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_action_enqueue_pad_get, _openflow.ofp_action_enqueue_pad_set)
    __swig_setmethods__["queue_id"] = _openflow.ofp_action_enqueue_queue_id_set
    __swig_getmethods__["queue_id"] = _openflow.ofp_action_enqueue_queue_id_get
    if _newclass:queue_id = _swig_property(_openflow.ofp_action_enqueue_queue_id_get, _openflow.ofp_action_enqueue_queue_id_set)
    def __init__(self): 
        this = _openflow.new_ofp_action_enqueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_action_enqueue
    __del__ = lambda self : None;
ofp_action_enqueue_swigregister = _openflow.ofp_action_enqueue_swigregister
ofp_action_enqueue_swigregister(ofp_action_enqueue)

class ofp_queue_stats_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_stats_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_stats_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _openflow.ofp_queue_stats_request_port_no_set
    __swig_getmethods__["port_no"] = _openflow.ofp_queue_stats_request_port_no_get
    if _newclass:port_no = _swig_property(_openflow.ofp_queue_stats_request_port_no_get, _openflow.ofp_queue_stats_request_port_no_set)
    __swig_setmethods__["pad"] = _openflow.ofp_queue_stats_request_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_queue_stats_request_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_queue_stats_request_pad_get, _openflow.ofp_queue_stats_request_pad_set)
    __swig_setmethods__["queue_id"] = _openflow.ofp_queue_stats_request_queue_id_set
    __swig_getmethods__["queue_id"] = _openflow.ofp_queue_stats_request_queue_id_get
    if _newclass:queue_id = _swig_property(_openflow.ofp_queue_stats_request_queue_id_get, _openflow.ofp_queue_stats_request_queue_id_set)
    def __init__(self): 
        this = _openflow.new_ofp_queue_stats_request()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_queue_stats_request
    __del__ = lambda self : None;
ofp_queue_stats_request_swigregister = _openflow.ofp_queue_stats_request_swigregister
ofp_queue_stats_request_swigregister(ofp_queue_stats_request)

class ofp_queue_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofp_queue_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofp_queue_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _openflow.ofp_queue_stats_port_no_set
    __swig_getmethods__["port_no"] = _openflow.ofp_queue_stats_port_no_get
    if _newclass:port_no = _swig_property(_openflow.ofp_queue_stats_port_no_get, _openflow.ofp_queue_stats_port_no_set)
    __swig_setmethods__["pad"] = _openflow.ofp_queue_stats_pad_set
    __swig_getmethods__["pad"] = _openflow.ofp_queue_stats_pad_get
    if _newclass:pad = _swig_property(_openflow.ofp_queue_stats_pad_get, _openflow.ofp_queue_stats_pad_set)
    __swig_setmethods__["queue_id"] = _openflow.ofp_queue_stats_queue_id_set
    __swig_getmethods__["queue_id"] = _openflow.ofp_queue_stats_queue_id_get
    if _newclass:queue_id = _swig_property(_openflow.ofp_queue_stats_queue_id_get, _openflow.ofp_queue_stats_queue_id_set)
    __swig_setmethods__["tx_bytes"] = _openflow.ofp_queue_stats_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _openflow.ofp_queue_stats_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_openflow.ofp_queue_stats_tx_bytes_get, _openflow.ofp_queue_stats_tx_bytes_set)
    __swig_setmethods__["tx_packets"] = _openflow.ofp_queue_stats_tx_packets_set
    __swig_getmethods__["tx_packets"] = _openflow.ofp_queue_stats_tx_packets_get
    if _newclass:tx_packets = _swig_property(_openflow.ofp_queue_stats_tx_packets_get, _openflow.ofp_queue_stats_tx_packets_set)
    __swig_setmethods__["tx_errors"] = _openflow.ofp_queue_stats_tx_errors_set
    __swig_getmethods__["tx_errors"] = _openflow.ofp_queue_stats_tx_errors_get
    if _newclass:tx_errors = _swig_property(_openflow.ofp_queue_stats_tx_errors_get, _openflow.ofp_queue_stats_tx_errors_set)
    def __init__(self): 
        this = _openflow.new_ofp_queue_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openflow.delete_ofp_queue_stats
    __del__ = lambda self : None;
ofp_queue_stats_swigregister = _openflow.ofp_queue_stats_swigregister
ofp_queue_stats_swigregister(ofp_queue_stats)



